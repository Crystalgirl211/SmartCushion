###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                24/Aug/2019  21:53:20
# Copyright 2004-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Components\zmac\f8w\zmac_cb.c
#    Command line       =  
#        -f
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0114
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Components\zmac\f8w\zmac_cb.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -D SAPP_ZSTACK -lC
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\RouterEB\List
#        -lA
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\RouterEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\Source\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\ZMain\TI2530DB\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\include\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\include\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\high_level\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mt\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\osal\include\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\saddr\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\sdata\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\af\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\nwk\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sapi\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sec\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sys\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\zdo\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\
#        -I
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\RouterEB\List\zmac_cb.lst
#    Object file        =  
#        C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\RouterEB\Obj\zmac_cb.r51
#
###############################################################################

C:\Users\dell\Desktop\zigbee µ—È\ µ—È÷∏µº È\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Components\zmac\f8w\zmac_cb.c
      1          /**************************************************************************************************
      2            Filename:       zmac_cb.c
      3            Revised:        $Date: 2011-05-24 10:23:19 -0700 (Tue, 24 May 2011) $
      4            Revision:       $Revision: 26064 $
      5          
      6            Description:    This file contains the NWK functions that the ZMAC calls
      7          
      8          
      9            Copyright 2005-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /********************************************************************************************************
     41           *                                               INCLUDES
     42           ********************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "ZMAC.h"
     47          #include "MT_MAC.h"
     48          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     49          
     50          #if !defined NONWK
     51          #include "nwk.h"
     52          #include "nwk_bufs.h"
     53          #include "ZGlobals.h"
     54          #endif
     55          
     56          #if defined( MACSIM )
     57            #include "mac_sim.h"
     58          #endif
     59          
     60          #include "mac_security.h"
     61          
     62          #include "mac_main.h"
     63          extern void *ZMac_ScanBuf;
     64          
     65          /********************************************************************************************************
     66           *                                               CONSTANTS
     67           ********************************************************************************************************/
     68          
     69          #if !defined NONWK
     70          /* Lookup table for size of structures. Must match with the order of MAC callback events */

   \                                 In  segment CODE_C, align 1
     71          const uint8 CODE zmacCBSizeTable [] = {
   \                     zmacCBSizeTable:
   \   000000   00           DB 0
   \   000001   16           DB 22
   \   000002   0F           DB 15
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   0B           DB 11
   \   000006   15           DB 21
   \   000007   0B           DB 11
   \   000008   02           DB 2
   \   000009   00           DB 0
   \   00000A   02           DB 2
   \   00000B   22           DB 34
   \   00000C   0F           DB 15
   \   00000D   32           DB 50
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   06           DB 6
     72            0,
     73            sizeof(ZMacAssociateInd_t),       // MAC_MLME_ASSOCIATE_IND      1   Associate indication
     74            sizeof(ZMacAssociateCnf_t),       // MAC_MLME_ASSOCIATE_CNF      2   Associate confirm
     75            0,                                // MAC_MLME_DISASSOCIATE_IND   3   Disassociate indication
     76            0,                                // MAC_MLME_DISASSOCIATE_CNF   4   Disassociate confirm
     77            sizeof(macMlmeBeaconNotifyInd_t), // MAC_MLME_BEACON_NOTIFY_IND  5   con notify indication
     78            sizeof(ZMacOrphanInd_t),          // MAC_MLME_ORPHAN_IND         6   Orphan indication
     79            sizeof(ZMacScanCnf_t),            // MAC_MLME_SCAN_CNF           7   Scan confirm
     80            sizeof(ZMacStartCnf_t),           // MAC_MLME_START_CNF          8   Start confirm
     81            0,                                // MAC_MLME_SYNC_LOSS_IND      9   Sync loss indication
     82            sizeof(ZMacPollCnf_t),            // MAC_MLME_POLL_CNF           10  Poll confirm
     83            sizeof(ZMacCommStatusInd_t),      // MAC_MLME_COMM_STATUS_IND    11  Comm status indication
     84            sizeof(ZMacDataCnf_t),            // MAC_MCPS_DATA_CNF           12  Data confirm
     85            sizeof(macMcpsDataInd_t),         // MAC_MCPS_DATA_IND           13  Data indication
     86            0,                                // MAC_MCPS_PURGE_CNF          14  Purge confirm
     87            0,                                // MAC_PWR_ON_CNF              15  Power on confirm
     88            sizeof(ZMacPollInd_t)             // MAC_MLME_POLL_IND           16  Poll indication
     89          };
     90          #endif /* !defined NONWK */
     91          
     92          /********************************************************************************************************
     93           *                                               LOCALS
     94           ********************************************************************************************************/
     95          
     96          /* LQI Adjustment Mode */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          static ZMacLqiAdjust_t lqiAdjMode = LQI_ADJ_OFF;
   \                     lqiAdjMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     98          
     99          #if !defined NONWK
    100          /* LQI Adjustment Function */
    101          static void ZMacLqiAdjust( uint8 corr, uint8* lqi );
    102          #endif
    103          
    104          /*********************************************************************
    105           * ZMAC Function Pointers
    106           */
    107          
    108          /*
    109           * ZMac Application callback function. This function will be called
    110           * for every MAC message that is received over-the-air or generated
    111           * locally by MAC for the application.
    112           *
    113           * The callback function should return TRUE if it has handled the
    114           * MAC message and no further action should be taken with it. It
    115           * should return FALSE if it has not handled the MAC message and
    116           * normal processing should take place.
    117           *
    118           * NOTE: The processing in this function should be kept to the
    119           *       minimum.
    120           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          uint8 (*pZMac_AppCallback)( uint8 *msgPtr ) = (void*)NULL;
   \                     pZMac_AppCallback:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    122          
    123          
    124          /*********************************************************************
    125           * ZMAC Functions
    126           */
    127          
    128          /**************************************************************************************************
    129           * @fn       MAC_CbackEvent()
    130           *
    131           * @brief    convert MAC data confirm and indication to ZMac and send to NWK
    132           *
    133           * @param    pData - pointer to macCbackEvent_t
    134           *
    135           * @return   none
    136           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          void MAC_CbackEvent(macCbackEvent_t *pData)
   \                     MAC_CbackEvent:
    138          #ifndef MT_MAC_CB_FUNC
    139          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
    140          #if !defined NONWK
    141            uint8 event = pData->hdr.event;
   \   000015   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V3,A
    142            uint16 tmp = zmacCBSizeTable[event];
   \   00001B   F8           MOV     R0,A
   \   00001C   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00001F   F8           MOV     R0,A
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E8           MOV     A,R0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
    143            macCbackEvent_t *msgPtr;
    144          
    145            /* If the Network layer will handle a new MAC callback, a non-zero value must be entered in the
    146             * corresponding location in the zmacCBSizeTable[] - thus the table acts as "should handle"?
    147             */
    148            if (tmp == 0)
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   7003         JNZ     $+5
   \   000032   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    149            {
    150              return;
    151            }
    152          
    153            // MAC_MCPS_DATA_IND is very special - it is the only event where the MAC does not free *pData.
    154            if ( event == MAC_MCPS_DATA_IND )
   \   000035   740D         MOV     A,#0xd
   \   000037   65..         XRL     A,?V3
   \   000039   7045         JNZ     ??MAC_CbackEvent_1
    155            {
    156              MAC_MlmeGetReq( MAC_SHORT_ADDRESS, &tmp );
   \   00003B                ; Setup parameters for call to function MAC_MlmeGetReq
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?XSTACK_DISP101_8
   \   000040   7953         MOV     R1,#0x53
   \   000042   12....       LCALL   `??MAC_MlmeGetReq::?relay`; Banked call to: MAC_MlmeGetReq
    157              if ((tmp == INVALID_NODE_ADDR) || (tmp == NWK_BROADCAST_SHORTADDR_DEVALL) ||
    158                  (pData->dataInd.msdu.len == 0))
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   64FE         XRL     A,#0xfe
   \   00004D   7003         JNZ     ??MAC_CbackEvent_2
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F4           CPL     A
   \                     ??MAC_CbackEvent_2:
   \   000052   7003         JNZ     $+5
   \   000054   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F4           CPL     A
   \   00005E   7003         JNZ     ??MAC_CbackEvent_4
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F4           CPL     A
   \                     ??MAC_CbackEvent_4:
   \   000063   7003         JNZ     $+5
   \   000065   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
   \   000068   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   7003         JNZ     $+5
   \   00006F   02....       LJMP    ??MAC_CbackEvent_3 & 0xFFFF
    159              {
    160                mac_msg_deallocate( (uint8 **)&pData );
    161                return;
    162              }
    163              msgPtr = pData;
   \   000072   85..82       MOV     DPL,?XSP + 0
   \   000075   85..83       MOV     DPH,?XSP + 1
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FE           MOV     R6,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   FF           MOV     R7,A
   \   00007D   02....       LJMP    ??MAC_CbackEvent_5 & 0xFFFF
    164            }
    165            else
    166            {
    167              if (event == MAC_MLME_BEACON_NOTIFY_IND )
   \                     ??MAC_CbackEvent_1:
   \   000080   7405         MOV     A,#0x5
   \   000082   65..         XRL     A,?V3
   \   000084   7015         JNZ     ??MAC_CbackEvent_6
    168              {
    169                tmp += sizeof(macPanDesc_t) + pData->beaconNotifyInd.sduLength;
   \   000086   85..82       MOV     DPL,?XSP + 0
   \   000089   85..83       MOV     DPH,?XSP + 1
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F8           MOV     R0,A
   \   00008E   12....       LCALL   ?Subroutine4 & 0xFFFF
    170              }
   \                     ??CrossCallReturnLabel_9:
   \   000091   7900         MOV     R1,#0x0
   \   000093   2421         ADD     A,#0x21
   \   000095   F8           MOV     R0,A
   \   000096   5030         JNC     ??MAC_CbackEvent_7
   \   000098   09           INC     R1
   \   000099   802D         SJMP    ??MAC_CbackEvent_7
    171              else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_6:
   \   00009B   7407         MOV     A,#0x7
   \   00009D   65..         XRL     A,?V3
   \   00009F   7033         JNZ     ??MAC_CbackEvent_8
    172              {
    173                if (pData->scanCnf.scanType == ZMAC_ED_SCAN)
   \   0000A1   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   700F         JNZ     ??MAC_CbackEvent_9
    174                {
    175                  tmp += ZMAC_ED_SCAN_MAXCHANNELS;
   \   0000A9   7402         MOV     A,#0x2
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   241B         ADD     A,#0x1b
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   3400         ADDC    A,#0x0
   \   0000B6   801B         SJMP    ??MAC_CbackEvent_10
    176                }
    177                else
    178                {
    179                  tmp += sizeof( ZMacPanDesc_t ) * pData->scanCnf.resultListSize;
   \                     ??MAC_CbackEvent_9:
   \   0000B8   85..82       MOV     DPL,?XSP + 0
   \   0000BB   85..83       MOV     DPH,?XSP + 1
   \   0000BE   12....       LCALL   ?Subroutine4 & 0xFFFF
    180                }
    181              }
   \                     ??CrossCallReturnLabel_10:
   \   0000C1   75F021       MOV     B,#0x21
   \   0000C4   A4           MUL     AB
   \   0000C5   F8           MOV     R0,A
   \   0000C6   A9F0         MOV     R1,B
   \                     ??MAC_CbackEvent_7:
   \   0000C8   7402         MOV     A,#0x2
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   28           ADD     A,R0
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   39           ADDC    A,R1
   \                     ??MAC_CbackEvent_10:
   \   0000D3   F0           MOVX    @DPTR,A
    182          
    183              if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \                     ??MAC_CbackEvent_8:
   \   0000D4                ; Setup parameters for call to function osal_msg_allocate
   \   0000D4   7402         MOV     A,#0x2
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   FA           MOV     R2,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   FB           MOV     R3,A
   \   0000DE   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0000E1   8A..         MOV     ?V0,R2
   \   0000E3   8B..         MOV     ?V1,R3
   \   0000E5   AE..         MOV     R6,?V0
   \   0000E7   AF..         MOV     R7,?V1
   \   0000E9   EE           MOV     A,R6
   \   0000EA   4F           ORL     A,R7
   \   0000EB   7052         JNZ     ??MAC_CbackEvent_11
    184              {
    185                // Not enough memory. If data confirm - try again
    186                if ( event == MAC_MCPS_DATA_CNF )
   \   0000ED   740C         MOV     A,#0xc
   \   0000EF   65..         XRL     A,?V3
   \   0000F1   6003         JZ      $+5
   \   0000F3   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    187                {
    188                  halIntState_t intState;
    189          
    190                  // This is not normally deallocated here because the pZMac_AppCallback()
    191                  // application may need it.
    192                  HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   0000F6   A2AF         MOV     C,0xa8.7
   \   0000F8   E4           CLR     A
   \   0000F9   33           RLC     A
   \   0000FA   F5..         MOV     ?V0,A
   \   0000FC   C2AF         CLR     0xa8.7
    193          
    194                  mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   0000FE                ; Setup parameters for call to function mac_msg_deallocate
   \   0000FE   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000101   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    195                  if ( !(msgPtr = (macCbackEvent_t *)osal_msg_allocate(tmp)) )
   \   000104                ; Setup parameters for call to function osal_msg_allocate
   \   000104   7402         MOV     A,#0x2
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   FA           MOV     R2,A
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   FB           MOV     R3,A
   \   00010E   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000111   8A..         MOV     ?V4,R2
   \   000113   8B..         MOV     ?V5,R3
   \   000115   AE..         MOV     R6,?V4
   \   000117   AF..         MOV     R7,?V5
   \   000119   EE           MOV     A,R6
   \   00011A   4F           ORL     A,R7
   \   00011B   700F         JNZ     ??MAC_CbackEvent_12
    196                  {
    197                    // Still no allocation, something is wrong
    198                    HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   00011D   7406         MOV     A,#0x6
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   E5..         MOV     A,?V0
   \   000124   F0           MOVX    @DPTR,A
   \   000125   A2E0         MOV     C,0xE0 /* A   */.0
   \   000127   92AF         MOV     0xa8.7,C
    199                    return;
   \   000129   02....       LJMP    ??MAC_CbackEvent_0 & 0xFFFF
    200                  }
    201                  HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??MAC_CbackEvent_12:
   \   00012C   7406         MOV     A,#0x6
   \   00012E   12....       LCALL   ?XSTACK_DISP0_8
   \   000131   E5..         MOV     A,?V0
   \   000133   F0           MOVX    @DPTR,A
   \   000134   A2E0         MOV     C,0xE0 /* A   */.0
   \   000136   92AF         MOV     0xa8.7,C
    202                  pData->dataCnf.pDataReq = NULL;
   \   000138   12....       LCALL   ?Subroutine3 & 0xFFFF
    203                }
    204                else
    205                {
    206                  // This message is dropped
    207                  return;
    208                }
    209              }
   \                     ??CrossCallReturnLabel_8:
   \   00013B   E4           CLR     A
   \   00013C   F0           MOVX    @DPTR,A
   \   00013D   A3           INC     DPTR
   \   00013E   F0           MOVX    @DPTR,A
    210              osal_memcpy(msgPtr, pData, zmacCBSizeTable[event]);
   \                     ??MAC_CbackEvent_11:
   \   00013F                ; Setup parameters for call to function osal_memcpy
   \   00013F   85..82       MOV     DPL,?XSP + 0
   \   000142   85..83       MOV     DPH,?XSP + 1
   \   000145   E0           MOVX    A,@DPTR
   \   000146   F5..         MOV     ?V0,A
   \   000148   A3           INC     DPTR
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   F5..         MOV     ?V1,A
   \   00014C   75..00       MOV     ?V2,#0x0
   \   00014F   78..         MOV     R0,#?V0
   \   000151   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000154   A8..         MOV     R0,?V3
   \   000156   12....       LCALL   ?Subroutine5 & 0xFFFF
    211            }
   \                     ??CrossCallReturnLabel_12:
   \   000159   FC           MOV     R4,A
   \   00015A   7D00         MOV     R5,#0x0
   \   00015C   EE           MOV     A,R6
   \   00015D   FA           MOV     R2,A
   \   00015E   EF           MOV     A,R7
   \   00015F   FB           MOV     R3,A
   \   000160   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000163   7403         MOV     A,#0x3
   \   000165   12....       LCALL   ?DEALLOC_XSTACK8
    212          
    213            if ( event == MAC_MLME_BEACON_NOTIFY_IND )
   \   000168   7405         MOV     A,#0x5
   \   00016A   65..         XRL     A,?V3
   \   00016C   707A         JNZ     ??MAC_CbackEvent_13
    214            {
    215              macMlmeBeaconNotifyInd_t *pBeacon = (macMlmeBeaconNotifyInd_t*)msgPtr;
    216          
    217              osal_memcpy(pBeacon+1, pBeacon->pPanDesc, sizeof(macPanDesc_t));
   \   00016E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000171   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000174   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000177   7C21         MOV     R4,#0x21
   \   000179   7D00         MOV     R5,#0x0
   \   00017B   AA..         MOV     R2,?V4
   \   00017D   AB..         MOV     R3,?V5
   \   00017F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000182   7403         MOV     A,#0x3
   \   000184   12....       LCALL   ?DEALLOC_XSTACK8
    218              pBeacon->pPanDesc = (macPanDesc_t *)(pBeacon+1);
   \   000187   8E82         MOV     DPL,R6
   \   000189   8F83         MOV     DPH,R7
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   E5..         MOV     A,?V4
   \   000190   F0           MOVX    @DPTR,A
   \   000191   A3           INC     DPTR
   \   000192   E5..         MOV     A,?V5
   \   000194   F0           MOVX    @DPTR,A
    219              osal_memcpy(pBeacon->pPanDesc+1, pBeacon->pSdu, pBeacon->sduLength);
   \   000195   EE           MOV     A,R6
   \   000196   2409         ADD     A,#0x9
   \   000198   F5..         MOV     ?V6,A
   \   00019A   E4           CLR     A
   \   00019B   3F           ADDC    A,R7
   \   00019C   F5..         MOV     ?V7,A
   \   00019E                ; Setup parameters for call to function osal_memcpy
   \   00019E   85..82       MOV     DPL,?V6
   \   0001A1   F583         MOV     DPH,A
   \   0001A3   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0001A6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001A9   8E82         MOV     DPL,R6
   \   0001AB   8F83         MOV     DPH,R7
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   FC           MOV     R4,A
   \   0001B7   7D00         MOV     R5,#0x0
   \   0001B9   E5..         MOV     A,?V4
   \   0001BB   2421         ADD     A,#0x21
   \   0001BD   FA           MOV     R2,A
   \   0001BE   E4           CLR     A
   \   0001BF   35..         ADDC    A,?V5
   \   0001C1   FB           MOV     R3,A
   \   0001C2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001C5   7403         MOV     A,#0x3
   \   0001C7   12....       LCALL   ?DEALLOC_XSTACK8
    220              pBeacon->pSdu = (uint8 *)(pBeacon->pPanDesc+1);
   \   0001CA   8E82         MOV     DPL,R6
   \   0001CC   8F83         MOV     DPH,R7
   \   0001CE   A3           INC     DPTR
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   2421         ADD     A,#0x21
   \   0001D4   F8           MOV     R0,A
   \   0001D5   A3           INC     DPTR
   \   0001D6   E0           MOVX    A,@DPTR
   \   0001D7   3400         ADDC    A,#0x0
   \   0001D9   F9           MOV     R1,A
   \   0001DA   85..82       MOV     DPL,?V6
   \   0001DD   85..83       MOV     DPH,?V7
   \   0001E0   E8           MOV     A,R0
   \   0001E1   F0           MOVX    @DPTR,A
   \   0001E2   A3           INC     DPTR
   \   0001E3   E9           MOV     A,R1
   \   0001E4   F0           MOVX    @DPTR,A
   \   0001E5   02....       LJMP    ??MAC_CbackEvent_5 & 0xFFFF
    221            }
    222            else if (event == MAC_MLME_SCAN_CNF)
   \                     ??MAC_CbackEvent_13:
   \   0001E8   7407         MOV     A,#0x7
   \   0001EA   65..         XRL     A,?V3
   \   0001EC   6003         JZ      $+5
   \   0001EE   02....       LJMP    ??MAC_CbackEvent_5 & 0xFFFF
    223            {
    224              macMlmeScanCnf_t *pScan = (macMlmeScanCnf_t*)msgPtr;
    225          
    226              if (ZMac_ScanBuf != NULL)
   \   0001F1   90....       MOV     DPTR,#ZMac_ScanBuf
   \   0001F4   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001F7   F9           MOV     R1,A
   \   0001F8   E8           MOV     A,R0
   \   0001F9   49           ORL     A,R1
   \   0001FA   7003         JNZ     $+5
   \   0001FC   02....       LJMP    ??MAC_CbackEvent_5 & 0xFFFF
    227              {
    228                void *pTmp = ZMac_ScanBuf;
   \   0001FF   7404         MOV     A,#0x4
   \   000201   12....       LCALL   ?XSTACK_DISP0_8
   \   000204   E8           MOV     A,R0
   \   000205   F0           MOVX    @DPTR,A
   \   000206   A3           INC     DPTR
   \   000207   E9           MOV     A,R1
   \   000208   F0           MOVX    @DPTR,A
    229                ZMac_ScanBuf = NULL;
   \   000209   90....       MOV     DPTR,#ZMac_ScanBuf
   \   00020C   E4           CLR     A
   \   00020D   F0           MOVX    @DPTR,A
   \   00020E   A3           INC     DPTR
   \   00020F   F0           MOVX    @DPTR,A
    230          
    231                if (pScan->scanType == ZMAC_ED_SCAN)
   \   000210   8E82         MOV     DPL,R6
   \   000212   8F83         MOV     DPH,R7
   \   000214   A3           INC     DPTR
   \   000215   A3           INC     DPTR
   \   000216   E0           MOVX    A,@DPTR
   \   000217   7027         JNZ     ??MAC_CbackEvent_14
    232                {
    233                  pScan->result.pEnergyDetect = (uint8*) (pScan + 1);
   \   000219   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00021C   EE           MOV     A,R6
   \   00021D   2409         ADD     A,#0x9
   \   00021F   F5..         MOV     ?V6,A
   \   000221   E4           CLR     A
   \   000222   3F           ADDC    A,R7
   \   000223   85..82       MOV     DPL,?V6
   \   000226   F583         MOV     DPH,A
   \   000228   E5..         MOV     A,?V4
   \   00022A   F0           MOVX    @DPTR,A
   \   00022B   A3           INC     DPTR
   \   00022C   E5..         MOV     A,?V5
   \   00022E   F0           MOVX    @DPTR,A
    234                  osal_memcpy(pScan->result.pEnergyDetect, pTmp, ZMAC_ED_SCAN_MAXCHANNELS);
   \   00022F                ; Setup parameters for call to function osal_memcpy
   \   00022F   7404         MOV     A,#0x4
   \   000231   12....       LCALL   ?XSTACK_DISP0_8
   \   000234   12....       LCALL   ?Subroutine2 & 0xFFFF
    235                }
   \                     ??CrossCallReturnLabel_5:
   \   000237   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00023A   7C1B         MOV     R4,#0x1b
   \   00023C   7D00         MOV     R5,#0x0
   \   00023E   802F         SJMP    ??MAC_CbackEvent_15
    236                else
    237                {
    238                  pScan->result.pPanDescriptor = (macPanDesc_t*) (pScan + 1);
   \                     ??MAC_CbackEvent_14:
   \   000240   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000243   A3           INC     DPTR
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   A3           INC     DPTR
   \   000247   A3           INC     DPTR
   \   000248   A3           INC     DPTR
   \   000249   E5..         MOV     A,?V4
   \   00024B   F0           MOVX    @DPTR,A
   \   00024C   A3           INC     DPTR
   \   00024D   E5..         MOV     A,?V5
   \   00024F   F0           MOVX    @DPTR,A
    239                  osal_memcpy(pScan + 1, pTmp, sizeof( ZMacPanDesc_t ) * pScan->resultListSize);
   \   000250                ; Setup parameters for call to function osal_memcpy
   \   000250   7404         MOV     A,#0x4
   \   000252   12....       LCALL   ?XSTACK_DISP0_8
   \   000255   12....       LCALL   ?Subroutine2 & 0xFFFF
    240                }
   \                     ??CrossCallReturnLabel_6:
   \   000258   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00025B   8E82         MOV     DPL,R6
   \   00025D   8F83         MOV     DPH,R7
   \   00025F   A3           INC     DPTR
   \   000260   A3           INC     DPTR
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   A3           INC     DPTR
   \   000264   A3           INC     DPTR
   \   000265   A3           INC     DPTR
   \   000266   A3           INC     DPTR
   \   000267   E0           MOVX    A,@DPTR
   \   000268   75F021       MOV     B,#0x21
   \   00026B   A4           MUL     AB
   \   00026C   FC           MOV     R4,A
   \   00026D   ADF0         MOV     R5,B
   \                     ??MAC_CbackEvent_15:
   \   00026F   AA..         MOV     R2,?V4
   \   000271   AB..         MOV     R3,?V5
   \   000273   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000276   7403         MOV     A,#0x3
   \   000278   12....       LCALL   ?DEALLOC_XSTACK8
    241          
    242                osal_mem_free(pTmp);
   \   00027B                ; Setup parameters for call to function osal_mem_free
   \   00027B   7404         MOV     A,#0x4
   \   00027D   12....       LCALL   ?XSTACK_DISP0_8
   \   000280   E0           MOVX    A,@DPTR
   \   000281   FA           MOV     R2,A
   \   000282   A3           INC     DPTR
   \   000283   E0           MOVX    A,@DPTR
   \   000284   FB           MOV     R3,A
   \   000285   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    243              }
    244            }
    245          
    246            if ( ( pZMac_AppCallback == NULL ) || ( pZMac_AppCallback( (uint8 *)msgPtr ) == FALSE ) )
   \                     ??MAC_CbackEvent_5:
   \   000288   90....       MOV     DPTR,#pZMac_AppCallback
   \   00028B   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00028E   F9           MOV     R1,A
   \   00028F   E8           MOV     A,R0
   \   000290   49           ORL     A,R1
   \   000291   6012         JZ      ??MAC_CbackEvent_16
   \   000293                ; Setup parameters for indirect call
   \   000293   EE           MOV     A,R6
   \   000294   FA           MOV     R2,A
   \   000295   EF           MOV     A,R7
   \   000296   FB           MOV     R3,A
   \   000297   E0           MOVX    A,@DPTR
   \   000298   F583         MOV     DPH,A
   \   00029A   8882         MOV     DPL,R0
   \   00029C   12....       LCALL   ?CALL_IND
   \   00029F   E9           MOV     A,R1
   \   0002A0   6003         JZ      $+5
   \   0002A2   02....       LJMP    ??MAC_CbackEvent_17 & 0xFFFF
    247            {
    248              // Filter out non-zigbee packets
    249              if ( event == MAC_MCPS_DATA_IND )
   \                     ??MAC_CbackEvent_16:
   \   0002A5   740D         MOV     A,#0xd
   \   0002A7   65..         XRL     A,?V3
   \   0002A9   6003         JZ      $+5
   \   0002AB   02....       LJMP    ??MAC_CbackEvent_18 & 0xFFFF
    250              {
    251                uint8 fcFrameType = (pData->dataInd.msdu.p[0] & 0x03);
    252                uint8 fcProtoVer = ((pData->dataInd.msdu.p[0] >> 2) & 0x0F);
    253                uint8 fcReserve = (pData->dataInd.msdu.p[1] & 0xE0);
   \   0002AE   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0002B1   F9           MOV     R1,A
   \   0002B2   8882         MOV     DPL,R0
   \   0002B4   8983         MOV     DPH,R1
   \   0002B6   A3           INC     DPTR
   \   0002B7   E0           MOVX    A,@DPTR
   \   0002B8   54E0         ANL     A,#0xe0
   \   0002BA   FA           MOV     R2,A
    254                if ( (fcFrameType > 0x01) || (fcProtoVer != _NIB.nwkProtocolVersion) || (fcReserve != 0)
    255                    || (pData->dataInd.mac.srcAddr.addrMode != SADDR_MODE_SHORT) )
   \   0002BB   8882         MOV     DPL,R0
   \   0002BD   8983         MOV     DPH,R1
   \   0002BF   E0           MOVX    A,@DPTR
   \   0002C0   5403         ANL     A,#0x3
   \   0002C2   C3           CLR     C
   \   0002C3   9402         SUBB    A,#0x2
   \   0002C5   5079         JNC     ??MAC_CbackEvent_3
   \   0002C7   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0002CA   F583         MOV     DPH,A
   \   0002CC   8882         MOV     DPL,R0
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   13           RRC     A
   \   0002D0   13           RRC     A
   \   0002D1   543F         ANL     A,#0x3f
   \   0002D3   540F         ANL     A,#0xf
   \   0002D5   F8           MOV     R0,A
   \   0002D6   90....       MOV     DPTR,#_NIB + 17
   \   0002D9   E0           MOVX    A,@DPTR
   \   0002DA   68           XRL     A,R0
   \   0002DB   7063         JNZ     ??MAC_CbackEvent_3
   \   0002DD   EA           MOV     A,R2
   \   0002DE   7060         JNZ     ??MAC_CbackEvent_3
   \   0002E0   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0002E3   C8           XCH     A,R0
   \   0002E4   241A         ADD     A,#0x1a
   \   0002E6   F582         MOV     DPL,A
   \   0002E8   E4           CLR     A
   \   0002E9   38           ADDC    A,R0
   \   0002EA   F583         MOV     DPH,A
   \   0002EC   E0           MOVX    A,@DPTR
   \   0002ED   6402         XRL     A,#0x2
   \   0002EF   6002         JZ      ??MAC_CbackEvent_19
    256                {
    257                  // Drop the message
    258                  mac_msg_deallocate( (uint8 **)&pData );
   \                     ??MAC_CbackEvent_20:
   \   0002F1                ; Setup parameters for call to function mac_msg_deallocate
   \   0002F1   804D         SJMP    ??MAC_CbackEvent_3
    259                  return;
    260                }
    261                else
    262                {
    263                  macDataInd_t *pInd = &msgPtr->dataInd.mac;
   \                     ??MAC_CbackEvent_19:
   \   0002F3   EE           MOV     A,R6
   \   0002F4   2412         ADD     A,#0x12
   \   0002F6   F8           MOV     R0,A
   \   0002F7   E4           CLR     A
   \   0002F8   3F           ADDC    A,R7
   \   0002F9   F9           MOV     R1,A
    264                  // See if LQI needs adjustment due to frame correlation
    265                  ZMacLqiAdjust( pInd->correlation, &pInd->mpduLinkQuality );
   \   0002FA                ; Setup parameters for call to function ZMacLqiAdjust
   \   0002FA   E8           MOV     A,R0
   \   0002FB   241C         ADD     A,#0x1c
   \   0002FD   FA           MOV     R2,A
   \   0002FE   E4           CLR     A
   \   0002FF   39           ADDC    A,R1
   \   000300   FB           MOV     R3,A
   \   000301   E8           MOV     A,R0
   \   000302   241D         ADD     A,#0x1d
   \   000304   F582         MOV     DPL,A
   \   000306   E4           CLR     A
   \   000307   39           ADDC    A,R1
   \   000308   F583         MOV     DPH,A
   \   00030A   E0           MOVX    A,@DPTR
   \   00030B   F9           MOV     R1,A
   \   00030C   12....       LCALL   `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    266          
    267                  // Look for broadcast message that has a radius of greater 1
    268                  if ( (pData->dataInd.mac.dstAddr.addr.shortAddr == 0xFFFF)
    269                         && (pData->dataInd.msdu.p[6] > 1) )
   \   00030F   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000312   C8           XCH     A,R0
   \   000313   241B         ADD     A,#0x1b
   \   000315   F582         MOV     DPL,A
   \   000317   E4           CLR     A
   \   000318   38           ADDC    A,R0
   \   000319   F583         MOV     DPH,A
   \   00031B   E0           MOVX    A,@DPTR
   \   00031C   F4           CPL     A
   \   00031D   7003         JNZ     ??MAC_CbackEvent_21
   \   00031F   A3           INC     DPTR
   \   000320   E0           MOVX    A,@DPTR
   \   000321   F4           CPL     A
   \                     ??MAC_CbackEvent_21:
   \   000322   7055         JNZ     ??MAC_CbackEvent_22
   \   000324   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000327   C8           XCH     A,R0
   \   000328   2406         ADD     A,#0x6
   \   00032A   F582         MOV     DPL,A
   \   00032C   E4           CLR     A
   \   00032D   38           ADDC    A,R0
   \   00032E   F583         MOV     DPH,A
   \   000330   E0           MOVX    A,@DPTR
   \   000331   C3           CLR     C
   \   000332   9402         SUBB    A,#0x2
   \   000334   4043         JC      ??MAC_CbackEvent_22
    270                  {
    271                    // Send the messsage to a special broadcast queue
    272                    if ( nwk_broadcastSend( (uint8 *)msgPtr ) != SUCCESS )
   \   000336                ; Setup parameters for call to function nwk_broadcastSend
   \   000336   EE           MOV     A,R6
   \   000337   FA           MOV     R2,A
   \   000338   EF           MOV     A,R7
   \   000339   FB           MOV     R3,A
   \   00033A   12....       LCALL   `??nwk_broadcastSend::?relay`; Banked call to: nwk_broadcastSend
   \   00033D   E9           MOV     A,R1
   \   00033E   6051         JZ      ??MAC_CbackEvent_0
    273                    {
    274                      // Drop the message, too many broadcast messages to process
    275                      mac_msg_deallocate( (uint8 **)&pData );
   \   000340                ; Setup parameters for call to function mac_msg_deallocate
   \                     ??MAC_CbackEvent_3:
   \   000340   AA..         MOV     R2,?XSP + 0
   \   000342   AB..         MOV     R3,?XSP + 1
   \   000344   8048         SJMP    ??CrossCallReturnLabel_14
    276                    }
    277                    return;
    278                  }
    279                }
    280              }
    281              else if ( event == MAC_MCPS_DATA_CNF )
   \                     ??MAC_CbackEvent_18:
   \   000346   740C         MOV     A,#0xc
   \   000348   65..         XRL     A,?V3
   \   00034A   702D         JNZ     ??MAC_CbackEvent_22
    282              {
    283                macMcpsDataCnf_t *pCnf = &msgPtr->dataCnf;
    284                
    285                if (pCnf->pDataReq->internal.txOptions & MAC_TXOPTION_ACK)
   \   00034C   8E82         MOV     DPL,R6
   \   00034E   8F83         MOV     DPH,R7
   \   000350   A3           INC     DPTR
   \   000351   A3           INC     DPTR
   \   000352   A3           INC     DPTR
   \   000353   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000356   C8           XCH     A,R0
   \   000357   240E         ADD     A,#0xe
   \   000359   F582         MOV     DPL,A
   \   00035B   E4           CLR     A
   \   00035C   38           ADDC    A,R0
   \   00035D   F583         MOV     DPH,A
   \   00035F   E0           MOVX    A,@DPTR
   \   000360   A2E0         MOV     C,0xE0 /* A   */.0
   \   000362   5015         JNC     ??MAC_CbackEvent_22
    286                {
    287                  // See if LQI needs adjustment due to frame correlation
    288                  ZMacLqiAdjust( pCnf->correlation, &pCnf->mpduLinkQuality );
   \   000364                ; Setup parameters for call to function ZMacLqiAdjust
   \   000364   EE           MOV     A,R6
   \   000365   240C         ADD     A,#0xc
   \   000367   FA           MOV     R2,A
   \   000368   E4           CLR     A
   \   000369   3F           ADDC    A,R7
   \   00036A   FB           MOV     R3,A
   \   00036B   EE           MOV     A,R6
   \   00036C   240D         ADD     A,#0xd
   \   00036E   F582         MOV     DPL,A
   \   000370   E4           CLR     A
   \   000371   3F           ADDC    A,R7
   \   000372   F583         MOV     DPH,A
   \   000374   E0           MOVX    A,@DPTR
   \   000375   F9           MOV     R1,A
   \   000376   12....       LCALL   `??ZMacLqiAdjust::?relay`; Banked call to: ZMacLqiAdjust
    289                }
    290              }
    291          
    292              // Application hasn't already processed this message. Send it to NWK task.
    293              osal_msg_send( NWK_TaskID, (uint8 *)msgPtr );
   \                     ??MAC_CbackEvent_22:
   \   000379                ; Setup parameters for call to function osal_msg_send
   \   000379   EE           MOV     A,R6
   \   00037A   FA           MOV     R2,A
   \   00037B   EF           MOV     A,R7
   \   00037C   FB           MOV     R3,A
   \   00037D   90....       MOV     DPTR,#NWK_TaskID
   \   000380   E0           MOVX    A,@DPTR
   \   000381   F9           MOV     R1,A
   \   000382   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    294            }
    295          
    296            if ( event == MAC_MCPS_DATA_CNF )
   \                     ??MAC_CbackEvent_17:
   \   000385   740C         MOV     A,#0xc
   \   000387   65..         XRL     A,?V3
   \   000389   7006         JNZ     ??MAC_CbackEvent_0
    297            {
    298              // If the application needs 'pDataReq' then we cannot free it here.
    299              // The application must free it after using it. Note that 'pDataReq'
    300              // is of macMcpsDataReq_t (and not ZMacDataReq_t) type.
    301          
    302              mac_msg_deallocate( (uint8**)&(pData->dataCnf.pDataReq) );
   \   00038B                ; Setup parameters for call to function mac_msg_deallocate
   \   00038B   12....       LCALL   ?Subroutine6 & 0xFFFF
    303            }
   \                     ??CrossCallReturnLabel_14:
   \   00038E   12....       LCALL   `??mac_msg_deallocate::?relay`; Banked call to: mac_msg_deallocate
    304          #endif
    305          }
   \                     ??MAC_CbackEvent_0:
   \   000391   7407         MOV     A,#0x7
   \   000393   12....       LCALL   ?DEALLOC_XSTACK8
   \   000396   7F08         MOV     R7,#0x8
   \   000398   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00039B                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F5..         MOV     ?V4,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F5..         MOV     ?V5,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2403         ADD     A,#0x3
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   FB           MOV     R3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   74..         MOV     A,#zmacCBSizeTable & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#(zmacCBSizeTable >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   E4           CLR     A
   \   00000B   93           MOVC    A,@A+DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   C8           XCH     A,R0
   \   000003   2408         ADD     A,#0x8
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   78..         MOV     R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine12_0
   \   000006                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F583         MOV     DPH,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   22           RET
    306          #else  // ifdef MT_MAC_CB_FUNC
    307          {
    308            /* Check if MT has subscribed for this callback If so, pass it as an event to MonitorTest */
    309            switch (pData->hdr.event)
    310            {
    311              case MAC_MLME_ASSOCIATE_IND:
    312                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_IND )
    313                  nwk_MTCallbackSubNwkAssociateInd ( (ZMacAssociateInd_t *)pData );
    314                break;
    315          
    316              case MAC_MLME_ASSOCIATE_CNF:
    317                if ( _macCallbackSub & CB_ID_NWK_ASSOCIATE_CNF )
    318                  nwk_MTCallbackSubNwkAssociateCnf ( (ZMacAssociateCnf_t *)pData );
    319                break;
    320          
    321              case MAC_MLME_DISASSOCIATE_IND:
    322                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_IND )
    323                  nwk_MTCallbackSubNwkDisassociateInd ( (ZMacDisassociateInd_t *)pData );
    324                break;
    325          
    326              case MAC_MLME_DISASSOCIATE_CNF:
    327                if ( _macCallbackSub & CB_ID_NWK_DISASSOCIATE_CNF )
    328                  nwk_MTCallbackSubNwkDisassociateCnf ( (ZMacDisassociateCnf_t *)pData );
    329                break;
    330          
    331              case MAC_MLME_BEACON_NOTIFY_IND:
    332                if ( _macCallbackSub & CB_ID_NWK_BEACON_NOTIFY_IND )
    333                  nwk_MTCallbackSubNwkBeaconNotifyInd( (ZMacBeaconNotifyInd_t *)pData );
    334                break;
    335          
    336              case MAC_MLME_ORPHAN_IND:
    337                if ( _macCallbackSub & CB_ID_NWK_ORPHAN_IND )
    338                  nwk_MTCallbackSubNwkOrphanInd( (ZMacOrphanInd_t *) pData );
    339                break;
    340          
    341              case MAC_MLME_SCAN_CNF:
    342                if ( _macCallbackSub & CB_ID_NWK_SCAN_CNF )
    343                {
    344                  pData->scanCnf.result.pEnergyDetect = ZMac_ScanBuf;
    345                  nwk_MTCallbackSubNwkScanCnf ( (ZMacScanCnf_t *) pData );
    346                }
    347          
    348                if (ZMac_ScanBuf != NULL)
    349                {
    350                  void *pTmp = ZMac_ScanBuf;
    351                  ZMac_ScanBuf = NULL;
    352                  osal_mem_free(pTmp);
    353                }
    354                break;
    355          
    356              case MAC_MLME_START_CNF:
    357                if ( _macCallbackSub & CB_ID_NWK_START_CNF )
    358                  nwk_MTCallbackSubNwkStartCnf ( pData->hdr.status );
    359                break;
    360          
    361              case MAC_MLME_SYNC_LOSS_IND:
    362                if ( _macCallbackSub & CB_ID_NWK_SYNC_LOSS_IND )
    363                 nwk_MTCallbackSubNwkSyncLossInd( (ZMacSyncLossInd_t *) pData );
    364                break;
    365          
    366              case MAC_MLME_POLL_CNF:
    367                if ( _macCallbackSub & CB_ID_NWK_POLL_CNF )
    368                   nwk_MTCallbackSubNwkPollCnf( pData->hdr.status );
    369                break;
    370          
    371              case MAC_MLME_COMM_STATUS_IND:
    372                if ( _macCallbackSub & CB_ID_NWK_COMM_STATUS_IND )
    373                  nwk_MTCallbackSubCommStatusInd ( (ZMacCommStatusInd_t *) pData );
    374                break;
    375          
    376              case MAC_MCPS_DATA_CNF:
    377                mac_msg_deallocate((uint8**)&pData->dataCnf.pDataReq);
    378          
    379                if ( _macCallbackSub & CB_ID_NWK_DATA_CNF )
    380                  nwk_MTCallbackSubNwkDataCnf( (ZMacDataCnf_t *) pData );
    381                break;
    382          
    383              case MAC_MCPS_DATA_IND:
    384                {
    385                  /*
    386                     Data Ind is unconventional: to save an alloc/copy, reuse the MAC
    387                     buffer and re-organize the contents into ZMAC format.
    388                  */
    389                  ZMacDataInd_t *pDataInd = (ZMacDataInd_t *) pData;
    390                  uint8 event, status, len, *msdu;
    391          
    392                  /* Store parameters */
    393                  event = pData->hdr.event;
    394                  status = pData->hdr.status;
    395                  len = pData->dataInd.msdu.len;
    396                  msdu = pData->dataInd.msdu.p;
    397          
    398                  /* Copy security fields */
    399                  osal_memcpy(&pDataInd->Sec, &pData->dataInd.sec, sizeof(ZMacSec_t));
    400                  
    401                  /* Copy mac fields one by one since the two buffers overlap. */
    402                  osal_memcpy(&pDataInd->SrcAddr, &pData->dataInd.mac.srcAddr, sizeof(zAddrType_t));
    403                  osal_memcpy(&pDataInd->DstAddr, &pData->dataInd.mac.dstAddr, sizeof(zAddrType_t));
    404                  pDataInd->Timestamp = pData->dataInd.mac.timestamp;
    405                  pDataInd->Timestamp2 = pData->dataInd.mac.timestamp2;
    406                  pDataInd->SrcPANId = pData->dataInd.mac.srcPanId;
    407                  pDataInd->DstPANId = pData->dataInd.mac.dstPanId;
    408                  pDataInd->mpduLinkQuality = pData->dataInd.mac.mpduLinkQuality;
    409                  pDataInd->Correlation = pData->dataInd.mac.correlation;
    410                  pDataInd->Rssi = pData->dataInd.mac.rssi;
    411                  pDataInd->Dsn = pData->dataInd.mac.dsn;
    412          
    413                  /* Restore parameters */
    414                  pDataInd->hdr.Status = status;
    415                  pDataInd->hdr.Event = event;
    416                  pDataInd->msduLength = len;
    417          
    418                  if (len)
    419                    pDataInd->msdu = msdu;
    420                  else
    421                    pDataInd->msdu = NULL;
    422          
    423                  if ( _macCallbackSub & CB_ID_NWK_DATA_IND )
    424                    nwk_MTCallbackSubNwkDataInd ( pDataInd );
    425                }
    426          
    427                /* free buffer */
    428                mac_msg_deallocate( (uint8 **)&pData );
    429                break;
    430          
    431              case MAC_MCPS_PURGE_CNF:
    432                if ( _macCallbackSub & CB_ID_NWK_PURGE_CNF )
    433                  nwk_MTCallbackSubNwkPurgeCnf( (ZMacPurgeCnf_t *) pData);
    434                break;
    435          
    436              default:
    437                break;
    438            }
    439          }
    440          #endif
    441          
    442          /********************************************************************************************************
    443           * @fn      MAC_CbackCheckPending
    444           *
    445           * @brief   Return number of pending indirect msg
    446           *
    447           * @param   None
    448           *
    449           * @return  Number of indirect msg holding
    450           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    451          uint8 MAC_CbackCheckPending(void)
   \                     MAC_CbackCheckPending:
    452          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    453          #if !defined (NONWK)
    454            if ( ZSTACK_ROUTER_BUILD )
    455            {
    456              return (nwkDB_ReturnIndirectHoldingCnt());
   \   000004                ; Setup parameters for call to function nwkDB_ReturnIndirectHoldingCnt
   \   000004   12....       LCALL   `??nwkDB_ReturnIndirectHoldingCnt::?relay`; Banked call to: nwkDB_ReturnIndirectHoldingCnt
   \   000007                REQUIRE ?Subroutine0
   \   000007                ; // Fall through to label ?Subroutine0
    457            }
    458            else
    459            {
    460              return (0);
    461            }
    462          #else
    463            return (0);
    464          #endif
    465          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    466          
    467          /********************************************************************************************************
    468           * @fn      ZMacLqiAdjustMode
    469           *
    470           * @brief   Sets/return LQI adjust mode
    471           *
    472           * @param   mode - LQI_ADJ_GET = return current mode only
    473           *                 LQI_ADJ_OFF = disable LQI adjusts
    474           *                 LQI_ADJ_MODEx = set to LQI adjust MODEx
    475           *
    476           * @return  current LQI adjust mode
    477           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    478          ZMacLqiAdjust_t ZMacLqiAdjustMode( ZMacLqiAdjust_t mode )
   \                     ZMacLqiAdjustMode:
    479          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    480            if ( mode != LQI_ADJ_GET )
   \   000006   74FF         MOV     A,#-0x1
   \   000008   68           XRL     A,R0
   \   000009   6005         JZ      ??ZMacLqiAdjustMode_0
    481            {
    482              lqiAdjMode = mode;
   \   00000B   E8           MOV     A,R0
   \   00000C   90....       MOV     DPTR,#lqiAdjMode
   \   00000F   F0           MOVX    @DPTR,A
    483            }
    484            return ( lqiAdjMode );
   \                     ??ZMacLqiAdjustMode_0:
   \   000010   90....       MOV     DPTR,#lqiAdjMode
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   80..         SJMP    ?Subroutine0
    485          }
    486          
    487          #if !defined NONWK
    488          /********************************************************************************************************
    489           * @fn      ZMacLqiAdjust
    490           *
    491           * @brief   Adjust LQI according to correlation value
    492           *
    493           * @notes - the IEEE 802.15.4 specification provides some general statements on
    494           *          the subject of LQI. Section 6.7.8: "The minimum and maximum LQI values
    495           *          (0x00 and 0xFF) should be associated with the lowest and highest IEEE
    496           *          802.15.4 signals detectable by the receiver, and LQ values should be
    497           *          uniformly distributed between these two limits." Section E.2.3: "The
    498           *          LQI (see 6.7.8) measures the received energy and/or SNR for each
    499           *          received packet. When energy level and SNR information are combined,
    500           *          they can indicate whether a corrupt packet resulted from low signal
    501           *          strength or from high signal strength plus interference."
    502           *        - LQI Adjustment Mode1 provided below is a simple algorithm to use the
    503           *          packet correlation value (related to SNR) to scale incoming LQI value
    504           *          (related to signal strength) to 'derate' noisy packets.
    505           *        - LQI Adjustment Mode2 provided below is a location for a developer to
    506           *          implement their own proprietary LQI adjustment algorithm.
    507           *
    508           * @param   corr - packet correlation value
    509           * @param   lqi  - ptr to link quality (scaled rssi)
    510           *
    511           * @return  *lqi - adjusted link quality
    512           ********************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    513          static void ZMacLqiAdjust( uint8 corr, uint8 *lqi )
   \                     ZMacLqiAdjust:
    514          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FC           MOV     R4,A
   \   000009   EB           MOV     A,R3
   \   00000A   FD           MOV     R5,A
    515            if ( lqiAdjMode != LQI_ADJ_OFF )
   \   00000B   90....       MOV     DPTR,#lqiAdjMode
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6051         JZ      ??ZMacLqiAdjust_0
    516            {
    517              uint16 adjLqi = *lqi;
   \   000011   8C82         MOV     DPL,R4
   \   000013   8D83         MOV     DPH,R5
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   7900         MOV     R1,#0x0
    518          
    519              // Keep correlation within theoretical limits
    520              if ( corr < LQI_CORR_MIN )
   \   000019   EE           MOV     A,R6
   \   00001A   C3           CLR     C
   \   00001B   9432         SUBB    A,#0x32
   \   00001D   5004         JNC     ??ZMacLqiAdjust_1
    521              {
    522                 corr = LQI_CORR_MIN;
   \   00001F   7E32         MOV     R6,#0x32
   \   000021   8008         SJMP    ??ZMacLqiAdjust_2
    523              }
    524              else if ( corr > LQI_CORR_MAX )
   \                     ??ZMacLqiAdjust_1:
   \   000023   EE           MOV     A,R6
   \   000024   C3           CLR     C
   \   000025   946F         SUBB    A,#0x6f
   \   000027   4002         JC      ??ZMacLqiAdjust_2
    525              {
    526                 corr = LQI_CORR_MAX;
   \   000029   7E6E         MOV     R6,#0x6e
    527              }
    528          
    529              if ( lqiAdjMode == LQI_ADJ_MODE1 )
   \                     ??ZMacLqiAdjust_2:
   \   00002B   90....       MOV     DPTR,#lqiAdjMode
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6401         XRL     A,#0x1
   \   000031   701F         JNZ     ??ZMacLqiAdjust_3
    530              {
    531                /* MODE1 - linear scaling of incoming LQI with a "correlation percentage"
    532                           which is computed from the incoming correlation value between
    533                           theorectical minimum/maximum values. This is a very simple way
    534                           of 'derating' the incoming LQI as correlation value drops. */
    535                adjLqi = (adjLqi * (corr - LQI_CORR_MIN)) / (LQI_CORR_MAX - LQI_CORR_MIN);
   \   000033   EE           MOV     A,R6
   \   000034   24CE         ADD     A,#-0x32
   \   000036   F5..         MOV     ?V0,A
   \   000038   E4           CLR     A
   \   000039   34FF         ADDC    A,#-0x1
   \   00003B   F5..         MOV     ?V1,A
   \   00003D   E8           MOV     A,R0
   \   00003E   85..F0       MOV     B,?V0
   \   000041   A4           MUL     AB
   \   000042   C8           XCH     A,R0
   \   000043   AAF0         MOV     R2,B
   \   000045   85..F0       MOV     B,?V1
   \   000048   A4           MUL     AB
   \   000049   2A           ADD     A,R2
   \   00004A   F9           MOV     R1,A
   \   00004B   7A3C         MOV     R2,#0x3c
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   ?US_DIV_MOD
    536              }
    537              else if ( lqiAdjMode == LQI_ADJ_MODE2 )
    538              {
    539                /* MODE2 - location for developer to implement a proprietary algorithm */
    540              }
    541          
    542              // Replace incoming LQI with scaled value
    543              *lqi = (adjLqi > 255) ? 255 : (uint8)adjLqi;
   \                     ??ZMacLqiAdjust_3:
   \   000052   C3           CLR     C
   \   000053   E9           MOV     A,R1
   \   000054   9401         SUBB    A,#0x1
   \   000056   4004         JC      ??ZMacLqiAdjust_4
   \   000058   74FF         MOV     A,#-0x1
   \   00005A   8001         SJMP    ??ZMacLqiAdjust_5
   \                     ??ZMacLqiAdjust_4:
   \   00005C   E8           MOV     A,R0
   \                     ??ZMacLqiAdjust_5:
   \   00005D   8C82         MOV     DPL,R4
   \   00005F   8D83         MOV     DPH,R5
   \   000061   F0           MOVX    @DPTR,A
    544            }
    545          }
   \                     ??ZMacLqiAdjust_0:
   \   000062   7F02         MOV     R7,#0x2
   \   000064   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_CbackCheckPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_CbackCheckPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacLqiAdjustMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjustMode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZMacLqiAdjust::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZMacLqiAdjust
    546          #endif

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MAC_CbackCheckPending
        2      0   -> nwkDB_ReturnIndirectHoldingCnt
      1     26   MAC_CbackEvent
        0     23   -> MAC_MlmeGetReq
        0     23   -> ZMacLqiAdjust
        0     23   -> mac_msg_deallocate
        0     23   -> nwk_broadcastSend
        0     23   -> osal_mem_free
        0     26   -> osal_memcpy
        0     23   -> osal_msg_allocate
        0     23   -> osal_msg_send
      1     33   ZMacLqiAdjust
      2      0   ZMacLqiAdjustMode


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine12_0
       7  ?Subroutine0
       7  ?Subroutine1
       6  ?Subroutine10
      10  ?Subroutine11
      10  ?Subroutine2
       5  ?Subroutine3
      13  ?Subroutine4
      13  ?Subroutine5
      16  ?Subroutine6
       8  ?Subroutine7
      11  ?Subroutine8
      17  ?Subroutine9
       7  MAC_CbackCheckPending
       6  MAC_CbackCheckPending::?relay
     923  MAC_CbackEvent
       6  MAC_CbackEvent::?relay
     103  ZMacLqiAdjust
       6  ZMacLqiAdjust::?relay
      23  ZMacLqiAdjustMode
       6  ZMacLqiAdjustMode::?relay
       1  _A_IEN0
       1  lqiAdjMode
       2  pZMac_AppCallback
      17  zmacCBSizeTable

 
 1 184 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    17 bytes in segment CODE_C
     1 byte  in segment SFR_AN
     3 bytes in segment XDATA_Z
 
    41 bytes of CODE     memory
     0 bytes of DATA     memory (+ 1 byte shared)
 1 184 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
