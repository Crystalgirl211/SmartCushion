###############################################################################
#
# IAR C/C++ Compiler V9.30.3.3983 for 8051                27/May/2019  19:25:47
# Copyright 2004-2016 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\Source\SAPP_FrameWork.c
#    Command line       =  
#        -f
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x0114
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\Source\SAPP_FrameWork.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D SAPP_ZSTACK
#        -lC
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\List
#        -lA
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\Obj
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\Source\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\zstack\ZMain\TI2530DB\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\include\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\include\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\high_level\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\mt\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\osal\include\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\saddr\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\services\sdata\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\af\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\nwk\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sapi\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sec\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\sys\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\stack\zdo\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\
#        -I
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\..\..\Components\zmac\f8w\
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\List\SAPP_FrameWork.lst
#    Object file        =  
#        C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\CoordinatorEB\Obj\SAPP_FrameWork.r51
#
###############################################################################

C:\Users\dell\Desktop\zigbee实验\实验指导书\Code\Cap2_ZStack\ZStack-CC2530-r200\ZStack-CC2530-r200\Projects\SappWsn\Source\SAPP_FrameWork.c
      1          #if defined(SAPP_ZSTACK)
      2          #include "SAPP_FrameWork.h"
      3          #include <string.h>
      4          
      5          /*********************************************************************
      6           * FUNCTIONS
      7           *********************************************************************/
      8          static void createEndPoint(struct ep_info_t *epInfo, uint8 *task_id, uint8 ep);
      9          #if defined(ZDO_COORDINATOR)
     10          static uint8 uartMsgProcesser(uint8 *msg);
     11          #endif
     12          
     13          /*********************************************************************
     14           * Local Variables
     15           *********************************************************************/
     16          //uint8 ctrlBuffer[sizeof(TOPOINFO) + sizeof(FUNCTABLE) + FUNC_NUM * sizeof(FUNCINFO)];

   \                                 In  segment XDATA_I, align 1, keep-with-next
     17          static TOPOINFO topoBuffer = { 0x02 };
   \                     topoBuffer:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for topoBuffer>`
   \   00000E                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     18          FUNCTABLE *funcTableBuffer;// = (FUNCTABLE *)(&ctrlBuffer[sizeof(TOPOINFO)]);
   \                     funcTableBuffer:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     19          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     20          static devStates_t curNwkState;
   \                     curNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          static uint8 controlTaskId;
   \                     controlTaskId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     22          static uint8 functionTaskId;
   \                     functionTaskId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     23          static struct ep_info_t controlEndPointInfo;
   \                     controlEndPointInfo:
   \   000000                DS 33
   \   000021                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     24          static uint8 isUserTimerRunning = 0;
   \                     isUserTimerRunning:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     25          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     26          void sapp_taskInitProcess(void)
   \                     sapp_taskInitProcess:
     27          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     28           #if defined ( BUILD_ALL_DEVICES )
     29              // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
     30              // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
     31              // together - if they are - we will start up a coordinator. Otherwise,
     32              // the device will start as a router.
     33              if ( readCoordinatorJumper() )
     34                  zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
     35              else
     36                  zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
     37          #endif // BUILD_ALL_DEVICES
     38          
     39          #if defined ( HOLD_AUTO_START )
     40              // HOLD_AUTO_START is a compile option that will surpress ZDApp
     41              //  from starting the device and wait for the application to
     42              //  start the device.
     43              ZDOInitDevice(0);
     44          #endif
     45          
     46              // 构造功能列表
     47              funcTableBuffer = createFuncTable(funcCount);
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   90....       MOV     DPTR,#funcCount
   \   000008   E0           MOVX    A,@DPTR
   \   000009   75F003       MOV     B,#0x3
   \   00000C   A4           MUL     AB
   \   00000D   A9F0         MOV     R1,B
   \   00000F   2402         ADD     A,#0x2
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   39           ADDC    A,R1
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000018   90....       MOV     DPTR,#funcTableBuffer
   \   00001B   EA           MOV     A,R2
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
     48              funcTableBuffer->ft_type = 0x01;
   \   000020   90....       MOV     DPTR,#funcTableBuffer
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000028   7401         MOV     A,#0x1
   \   00002A   F0           MOVX    @DPTR,A
     49              funcTableBuffer->ft_count = funcCount;
   \   00002B   90....       MOV     DPTR,#funcCount
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C0E0         PUSH    A
   \   000031   90....       MOV     DPTR,#funcTableBuffer
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F8           MOV     R0,A
   \   000036   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000039   A3           INC     DPTR
   \   00003A   D0E0         POP     A
   \   00003C   F0           MOVX    @DPTR,A
     50              int i;
     51              for(i = 0; i < funcCount; i++)
   \   00003D   7E00         MOV     R6,#0x0
   \   00003F   7F00         MOV     R7,#0x0
   \   000041   804F         SJMP    ??sapp_taskInitProcess_0
     52              {
     53                  funcTableBuffer->ft_list[i].type = funcList[i].function.type;
   \                     ??sapp_taskInitProcess_1:
   \   000043   12....       LCALL   ?Subroutine17 & 0xFFFF
     54                  funcTableBuffer->ft_list[i].id = funcList[i].function.id;
     55                  funcTableBuffer->ft_list[i].cycle = funcList[i].function.cycle;
     56              }
   \                     ??CrossCallReturnLabel_50:
   \   000046   F8           MOV     R0,A
   \   000047   74..         MOV     A,#(funcList >> 8) & 0xff
   \   000049   39           ADDC    A,R1
   \   00004A   F9           MOV     R1,A
   \   00004B   E8           MOV     A,R0
   \   00004C   FA           MOV     R2,A
   \   00004D   E9           MOV     A,R1
   \   00004E   FB           MOV     R3,A
   \   00004F   EE           MOV     A,R6
   \   000050   F8           MOV     R0,A
   \   000051   EF           MOV     A,R7
   \   000052   F9           MOV     R1,A
   \   000053   E8           MOV     A,R0
   \   000054   75F003       MOV     B,#0x3
   \   000057   A4           MUL     AB
   \   000058   F8           MOV     R0,A
   \   000059   ACF0         MOV     R4,B
   \   00005B   75F003       MOV     B,#0x3
   \   00005E   E9           MOV     A,R1
   \   00005F   A4           MUL     AB
   \   000060   2C           ADD     A,R4
   \   000061   F9           MOV     R1,A
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   C0E0         PUSH    A
   \   000071   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000074   D0E0         POP     A
   \   000076   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   C0E0         PUSH    A
   \   00007C   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00007F   A3           INC     DPTR
   \   000080   D0E0         POP     A
   \   000082   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000085   C0E0         PUSH    A
   \   000087   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00008A   D0E0         POP     A
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   0E           INC     R6
   \   00008E   EE           MOV     A,R6
   \   00008F   7001         JNZ     ??sapp_taskInitProcess_0
   \   000091   0F           INC     R7
   \                     ??sapp_taskInitProcess_0:
   \   000092   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000095   40AC         JC      ??sapp_taskInitProcess_1
     57              controlTaskId = tasksCnt - 2;
   \   000097   90....       MOV     DPTR,#tasksCnt
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   24FE         ADD     A,#-0x2
   \   00009D   90....       MOV     DPTR,#controlTaskId
   \   0000A0   F0           MOVX    @DPTR,A
     58              functionTaskId = tasksCnt - 1;
   \   0000A1   90....       MOV     DPTR,#tasksCnt
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   14           DEC     A
   \   0000A6   90....       MOV     DPTR,#functionTaskId
   \   0000A9   F0           MOVX    @DPTR,A
     59              HalIOInit(functionTaskId);
   \   0000AA                ; Setup parameters for call to function HalIOInit
   \   0000AA   F9           MOV     R1,A
   \   0000AB   12....       LCALL   `??HalIOInit::?relay`; Banked call to: HalIOInit
     60              createEndPoint(&controlEndPointInfo, &controlTaskId, CONTROL_ENDPOINT);
   \   0000AE                ; Setup parameters for call to function createEndPoint
   \   0000AE   79F0         MOV     R1,#-0x10
   \   0000B0   7C..         MOV     R4,#controlTaskId & 0xff
   \   0000B2   7D..         MOV     R5,#(controlTaskId >> 8) & 0xff
   \   0000B4   7A..         MOV     R2,#controlEndPointInfo & 0xff
   \   0000B6   7B..         MOV     R3,#(controlEndPointInfo >> 8) & 0xff
   \   0000B8   12....       LCALL   `??createEndPoint::?relay`; Banked call to: createEndPoint
     61              for(i = 0; i < funcCount; i++)
   \   0000BB   7E00         MOV     R6,#0x0
   \   0000BD   7F00         MOV     R7,#0x0
   \   0000BF   8038         SJMP    ??sapp_taskInitProcess_2
     62              {
     63                  struct ep_info_t *ep = &funcList[i];
   \                     ??sapp_taskInitProcess_3:
   \   0000C1   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000C4   F5..         MOV     ?V0,A
   \   0000C6   74..         MOV     A,#(funcList >> 8) & 0xff
   \   0000C8   39           ADDC    A,R1
   \   0000C9   F5..         MOV     ?V1,A
     64                  createEndPoint(ep, &functionTaskId, i + 1);
   \   0000CB                ; Setup parameters for call to function createEndPoint
   \   0000CB   EE           MOV     A,R6
   \   0000CC   04           INC     A
   \   0000CD   F9           MOV     R1,A
   \   0000CE   7C..         MOV     R4,#functionTaskId & 0xff
   \   0000D0   7D..         MOV     R5,#(functionTaskId >> 8) & 0xff
   \   0000D2   AA..         MOV     R2,?V0
   \   0000D4   AB..         MOV     R3,?V1
   \   0000D6   12....       LCALL   `??createEndPoint::?relay`; Banked call to: createEndPoint
     65                  if(ep->res_available)
   \   0000D9   85..82       MOV     DPL,?V0
   \   0000DC   85..83       MOV     DPH,?V1
   \   0000DF   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000E2   6010         JZ      ??sapp_taskInitProcess_4
     66                    (*ep->res_available)(ep, ResInit, NULL);
   \   0000E4                ; Setup parameters for indirect call
   \   0000E4   7C00         MOV     R4,#0x0
   \   0000E6   7D00         MOV     R5,#0x0
   \   0000E8   7901         MOV     R1,#0x1
   \   0000EA   AA..         MOV     R2,?V0
   \   0000EC   AB..         MOV     R3,?V1
   \   0000EE   12....       LCALL   ?Subroutine5 & 0xFFFF
     67              }
   \                     ??CrossCallReturnLabel_74:
   \   0000F1   12....       LCALL   ?CALL_IND
   \                     ??sapp_taskInitProcess_4:
   \   0000F4   0E           INC     R6
   \   0000F5   EE           MOV     A,R6
   \   0000F6   7001         JNZ     ??sapp_taskInitProcess_2
   \   0000F8   0F           INC     R7
   \                     ??sapp_taskInitProcess_2:
   \   0000F9   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000FC   40C3         JC      ??sapp_taskInitProcess_3
     68          #if defined(ZDO_COORDINATOR)// || defined(RTR_NWK)
     69          //    RegisterForKeys( SampleApp_TaskID );
     70              MT_UartRegisterTaskID(controlTaskId);
   \   0000FE                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   0000FE   90....       MOV     DPTR,#controlTaskId
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F9           MOV     R1,A
   \   000103   12....       LCALL   `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
     71          #endif
     72          }
   \   000106                REQUIRE ?Subroutine0
   \   000106                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EE           MOV     A,R6
   \   000001   F8           MOV     R0,A
   \   000002   EF           MOV     A,R7
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   75F021       MOV     B,#0x21
   \   000008   A4           MUL     AB
   \   000009   F8           MOV     R0,A
   \   00000A   AAF0         MOV     R2,B
   \   00000C   75F021       MOV     B,#0x21
   \   00000F   E9           MOV     A,R1
   \   000010                REQUIRE ??Subroutine30_0
   \   000010                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   A4           MUL     AB
   \   000001   2A           ADD     A,R2
   \   000002   F9           MOV     R1,A
   \   000003   74..         MOV     A,#funcList & 0xff
   \   000005   28           ADD     A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#funcTableBuffer
   \   000003   E0           MOVX    A,@DPTR
   \   000004   28           ADD     A,R0
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   39           ADDC    A,R1
   \   000009   8C82         MOV     DPL,R4
   \   00000B   F583         MOV     DPH,A
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#funcCount
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   C3           CLR     C
   \   000006   EE           MOV     A,R6
   \   000007   98           SUBB    A,R0
   \   000008   EF           MOV     A,R7
   \   000009   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine33_0
   \   000002                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine34_0
   \   000002                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine35_0
   \   000001                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine36_0
   \   000001                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#funcTableBuffer
   \   000003   E0           MOVX    A,@DPTR
   \   000004   28           ADD     A,R0
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   39           ADDC    A,R1
   \   000009   8A82         MOV     DPL,R2
   \   00000B   F583         MOV     DPH,A
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A                REQUIRE ??Subroutine38_0
   \   00000A                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     77          static void createEndPoint(struct ep_info_t *epInfo, uint8 *task_id, uint8 ep)
   \                     createEndPoint:
     78          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     79              static cId_t commonClusterId = SAPP_PERIODIC_CLUSTERID;
     80              // Fill out the endpoint description.
     81              epInfo->task_id = *task_id;
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   C0E0         PUSH    A
   \   00000E   EA           MOV     A,R2
   \   00000F   240C         ADD     A,#0xc
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3B           ADDC    A,R3
   \   000015   F583         MOV     DPH,A
   \   000017   D0E0         POP     A
   \   000019   F0           MOVX    @DPTR,A
     82              epInfo->ep = ep;
   \   00001A   EA           MOV     A,R2
   \   00001B   240B         ADD     A,#0xb
   \   00001D   F582         MOV     DPL,A
   \   00001F   E4           CLR     A
   \   000020   3B           ADDC    A,R3
   \   000021   F583         MOV     DPH,A
   \   000023   E9           MOV     A,R1
   \   000024   12....       LCALL   ?Subroutine14 & 0xFFFF
     83              epInfo->timerTick = epInfo->function.cycle;
   \                     ??CrossCallReturnLabel_16:
   \   000027   C0E0         PUSH    A
   \   000029   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00002C   D0E0         POP     A
   \   00002E   F0           MOVX    @DPTR,A
     84              epInfo->userTimer = 0;
   \   00002F   12....       LCALL   ?Subroutine19 & 0xFFFF
     85          
     86              epInfo->simpleDesc.EndPoint = ep;
   \                     ??CrossCallReturnLabel_23:
   \   000032   EA           MOV     A,R2
   \   000033   2415         ADD     A,#0x15
   \   000035   F5..         MOV     ?V0,A
   \   000037   E4           CLR     A
   \   000038   3B           ADDC    A,R3
   \   000039   F5..         MOV     ?V1,A
   \   00003B   EE           MOV     A,R6
   \   00003C   85..82       MOV     DPL,?V0
   \   00003F   85..83       MOV     DPH,?V1
   \   000042   F0           MOVX    @DPTR,A
     87              epInfo->simpleDesc.AppProfId = SAPP_PROFID;
   \   000043   EA           MOV     A,R2
   \   000044   2416         ADD     A,#0x16
   \   000046   F582         MOV     DPL,A
   \   000048   E4           CLR     A
   \   000049   3B           ADDC    A,R3
   \   00004A   F583         MOV     DPH,A
   \   00004C   7408         MOV     A,#0x8
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   740F         MOV     A,#0xf
   \   000052   F0           MOVX    @DPTR,A
     88              epInfo->simpleDesc.AppDeviceId = SAPP_DEVICEID;
   \   000053   EA           MOV     A,R2
   \   000054   2418         ADD     A,#0x18
   \   000056   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000059   A3           INC     DPTR
   \   00005A   E4           CLR     A
   \   00005B   F0           MOVX    @DPTR,A
     89              epInfo->simpleDesc.AppDevVer = SAPP_DEVICE_VERSION;
     90              epInfo->simpleDesc.Reserved = 0;
   \   00005C   EA           MOV     A,R2
   \   00005D   241A         ADD     A,#0x1a
   \   00005F   F582         MOV     DPL,A
   \   000061   E4           CLR     A
   \   000062   3B           ADDC    A,R3
   \   000063   F583         MOV     DPH,A
   \   000065   E4           CLR     A
   \   000066   F0           MOVX    @DPTR,A
     91              epInfo->simpleDesc.AppNumInClusters = 1;
   \   000067   EA           MOV     A,R2
   \   000068   241B         ADD     A,#0x1b
   \   00006A   12....       LCALL   ?Subroutine20 & 0xFFFF
     92              epInfo->simpleDesc.pAppInClusterList = &commonClusterId;
   \                     ??CrossCallReturnLabel_26:
   \   00006D   EA           MOV     A,R2
   \   00006E   241C         ADD     A,#0x1c
   \   000070   12....       LCALL   ?Subroutine18 & 0xFFFF
     93              epInfo->simpleDesc.AppNumOutClusters = 1;
   \                     ??CrossCallReturnLabel_21:
   \   000073   241E         ADD     A,#0x1e
   \   000075   12....       LCALL   ?Subroutine20 & 0xFFFF
     94              epInfo->simpleDesc.pAppOutClusterList = &commonClusterId;
   \                     ??CrossCallReturnLabel_27:
   \   000078   EA           MOV     A,R2
   \   000079   241F         ADD     A,#0x1f
   \   00007B   12....       LCALL   ?Subroutine18 & 0xFFFF
     95          
     96              epInfo->SampleApp_epDesc.endPoint = ep;
   \                     ??CrossCallReturnLabel_22:
   \   00007E   240F         ADD     A,#0xf
   \   000080   F8           MOV     R0,A
   \   000081   E4           CLR     A
   \   000082   3B           ADDC    A,R3
   \   000083   F9           MOV     R1,A
   \   000084   EE           MOV     A,R6
   \   000085   8882         MOV     DPL,R0
   \   000087   8983         MOV     DPH,R1
   \   000089   F0           MOVX    @DPTR,A
     97              epInfo->SampleApp_epDesc.task_id = task_id;
   \   00008A   EA           MOV     A,R2
   \   00008B   2410         ADD     A,#0x10
   \   00008D   F582         MOV     DPL,A
   \   00008F   E4           CLR     A
   \   000090   3B           ADDC    A,R3
   \   000091   F583         MOV     DPH,A
   \   000093   EC           MOV     A,R4
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   ED           MOV     A,R5
   \   000097   F0           MOVX    @DPTR,A
     98              epInfo->SampleApp_epDesc.simpleDesc = &epInfo->simpleDesc;
   \   000098   EA           MOV     A,R2
   \   000099   2412         ADD     A,#0x12
   \   00009B   F582         MOV     DPL,A
   \   00009D   E4           CLR     A
   \   00009E   3B           ADDC    A,R3
   \   00009F   F583         MOV     DPH,A
   \   0000A1   E5..         MOV     A,?V0
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E5..         MOV     A,?V1
   \   0000A7   F0           MOVX    @DPTR,A
     99              epInfo->SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   0000A8   EA           MOV     A,R2
   \   0000A9   2414         ADD     A,#0x14
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   E4           CLR     A
   \   0000AE   3B           ADDC    A,R3
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   E4           CLR     A
   \   0000B2   F0           MOVX    @DPTR,A
    100          
    101              // Register the endpoint description with the AF
    102              afRegister(&epInfo->SampleApp_epDesc);
   \   0000B3                ; Setup parameters for call to function afRegister
   \   0000B3   E8           MOV     A,R0
   \   0000B4   FA           MOV     R2,A
   \   0000B5   E9           MOV     A,R1
   \   0000B6   FB           MOV     R3,A
   \   0000B7   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    103          }
   \   0000BA   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3B           ADDC    A,R3
   \   000004   F583         MOV     DPH,A
   \   000006   7401         MOV     A,#0x1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3B           ADDC    A,R3
   \   000004   F583         MOV     DPH,A
   \   000006   74..         MOV     A,#??commonClusterId & 0xff
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   74..         MOV     A,#(??commonClusterId >> 8) & 0xff
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   EA           MOV     A,R2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EA           MOV     A,R2
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   EA           MOV     A,R2
   \   000001   240D         ADD     A,#0xd
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??commonClusterId:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for commonClusterId>`
   \   000002                REQUIRE __INIT_XDATA_I
    104          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   39           ADDC    A,R1
   \   000001   FB           MOV     R3,A
   \   000002                REQUIRE ??Subroutine31_0
   \   000002                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine32_0
   \   000004                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          uint16 sapp_controlEpProcess(uint8 task_id, uint16 events)
   \                     sapp_controlEpProcess:
    106          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V3,R1
   \   00000C   8A..         MOV     ?V4,R2
   \   00000E   8B..         MOV     ?V5,R3
    107              afIncomingMSGPacket_t *MSGpkt;
    108          
    109              if ( events & SYS_EVENT_MSG )
   \   000010   EB           MOV     A,R3
   \   000011   5480         ANL     A,#0x80
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??sapp_controlEpProcess_0 & 0xFFFF
    110              {
    111                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(task_id);
   \   000018                ; Setup parameters for call to function osal_msg_receive
   \   000018   02....       LJMP    ??sapp_controlEpProcess_1 & 0xFFFF
    112                  while ( MSGpkt )
    113                  {
    114                      switch ( MSGpkt->hdr.event )
    115                      {
    116          #if defined(ZDO_COORDINATOR)
    117                      case CMD_SERIAL_MSG:
    118          //                SampleApp_UartMessage((uint8 *)MSGpkt);
    119                          uartMsgProcesser((uint8 *)MSGpkt);
    120                          HalLedBlink( HAL_LED_1, 2, 50, 90 );
    121                          break;
    122          #endif
    123                          // Received when a messages is received (OTA) for this endpoint
    124                      case AF_INCOMING_MSG_CMD:
    125                      {
    126                          // TODO: QueryProfile or QueryTopo
    127                          switch(MSGpkt->clusterId)
    128                          {
    129                          case SAPP_PERIODIC_CLUSTERID:
    130                              switch(MSGpkt->cmd.Data[0])
    131                              {
    132                              case 0x01:
    133                                  // CtrlQueryProfile
    134                                  // 获取到数据包的来源地址来当做发送数据的目标
    135                                  SendData(CONTROL_ENDPOINT, funcTableBuffer->ft_data, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(FUNCTABLE) + funcCount * sizeof(FUNCINFO));
    136                                  break;
    137                              case 0x02:
    138                                  // CtrlQueryTopo
    139                                  // 获取到数据包的来源地址来当做发送数据的目标
    140                                  SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(TOPOINFO));
    141                                  break;
    142                              case 0x03:
    143                                  // CtrlQuerySpecialFunction
    144                                  // cmd.Data[0] = 3, cmd.Data[1] = funcCode, cmd.Data[2] = funcID
    145                                  {
    146                                      uint8 i;
    147                                      for(i = 0; i < funcTableBuffer->ft_count; i++)
    148                                      {
    149                                          if((funcTableBuffer->ft_list[i].type == MSGpkt->cmd.Data[1])
    150                                             && (funcTableBuffer->ft_list[i].id == MSGpkt->cmd.Data[2]))
    151                                          {
    152                                              // 0x03, EndPoint, rCycle
    153                                              uint8 specialFunc[3] = { 0x03, i + 1, funcTableBuffer->ft_list[i].cycle };
    154                                              SendData(CONTROL_ENDPOINT, specialFunc, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, sizeof(specialFunc));
    155                                              break;
    156                                          }
    157                                      }
    158                                  }
    159                                  break;
    160                              default:
    161                                  {
    162                                      int i;
    163                                      for(i = 0; i < funcCount; i++)
    164                                      {
    165                                          struct ep_info_t *ep = &funcList[i];
    166                                          if(ep->res_available)   (*ep->res_available)(ep, ResControlPkg, MSGpkt);
    167                                      }
    168                                  }
    169                                  break;
    170                              }
    171                              HalLedBlink( HAL_LED_2, 1, 50, 250 );
    172                              break;
    173                          }
    174                          break;
    175                      }
    176                      // Received whenever the device changes state in the network
    177                      case ZDO_STATE_CHANGE:
    178                      {
    179                          devStates_t st = (devStates_t)(MSGpkt->hdr.status);
   \                     ??sapp_controlEpProcess_2:
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
    180                          if ( (st == DEV_ZB_COORD)
    181                                  || (st == DEV_ROUTER)
    182                                  || (st == DEV_END_DEVICE) )
   \   00001E   7409         MOV     A,#0x9
   \   000020   68           XRL     A,R0
   \   000021   600D         JZ      ??sapp_controlEpProcess_3
   \   000023   7407         MOV     A,#0x7
   \   000025   68           XRL     A,R0
   \   000026   6008         JZ      ??sapp_controlEpProcess_3
   \   000028   7406         MOV     A,#0x6
   \   00002A   68           XRL     A,R0
   \   00002B   6003         JZ      $+5
   \   00002D   02....       LJMP    ??sapp_controlEpProcess_4 & 0xFFFF
    183                          {
    184          //                    topoBuffer->type = 0x02;
    185                              memcpy(topoBuffer.IEEE, NLME_GetExtAddr(), 8);
   \                     ??sapp_controlEpProcess_3:
   \   000030                ; Setup parameters for call to function NLME_GetExtAddr
   \   000030   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000033   8A..         MOV     ?V0,R2
   \   000035   8B..         MOV     ?V1,R3
   \   000037   AC..         MOV     R4,?V0
   \   000039   AD..         MOV     R5,?V1
   \   00003B                ; Setup parameters for call to function memcpy
   \   00003B   75..08       MOV     ?V0,#0x8
   \   00003E   75..00       MOV     ?V1,#0x0
   \   000041   78..         MOV     R0,#?V0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   7A..         MOV     R2,#(topoBuffer + 1) & 0xff
   \   000048   7B..         MOV     R3,#((topoBuffer + 1) >> 8) & 0xff
   \   00004A   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
    186          #if !defined(ZDO_COORDINATOR)
    187                              topoBuffer.PAddr = NLME_GetCoordShortAddr();
    188          #else
    189                              topoBuffer.PAddr = 0xFFFF;
   \   000052   90....       MOV     DPTR,#topoBuffer + 9
   \   000055   74FF         MOV     A,#-0x1
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   F0           MOVX    @DPTR,A
    190          #endif
    191                              osal_memcpy(&topoBuffer.panid, &_NIB.nwkPanId, sizeof(uint16));
   \   00005A                ; Setup parameters for call to function osal_memcpy
   \   00005A   75....       MOV     ?V0,#(_NIB + 33) & 0xff
   \   00005D   75....       MOV     ?V1,#((_NIB + 33) >> 8) & 0xff
   \   000060   75..00       MOV     ?V2,#0x0
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000068   7C02         MOV     R4,#0x2
   \   00006A   7D00         MOV     R5,#0x0
   \   00006C   7A..         MOV     R2,#(topoBuffer + 11) & 0xff
   \   00006E   7B..         MOV     R3,#((topoBuffer + 11) >> 8) & 0xff
   \   000070   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000073   7403         MOV     A,#0x3
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
    192                              osal_memcpy(&topoBuffer.channel, &_NIB.nwkLogicalChannel, sizeof(uint8));
   \   000078                ; Setup parameters for call to function osal_memcpy
   \   000078   75....       MOV     ?V0,#(_NIB + 22) & 0xff
   \   00007B   75....       MOV     ?V1,#((_NIB + 22) >> 8) & 0xff
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000083   7C01         MOV     R4,#0x1
   \   000085   7D00         MOV     R5,#0x0
   \   000087   7A..         MOV     R2,#(topoBuffer + 13) & 0xff
   \   000089   7B..         MOV     R3,#((topoBuffer + 13) >> 8) & 0xff
   \   00008B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008E   7403         MOV     A,#0x3
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
    193                              //向协调器发送拓扑信息
    194                              SendData(CONTROL_ENDPOINT, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO));
   \   000093                ; Setup parameters for call to function SendData
   \   000093   75..0E       MOV     ?V0,#0xe
   \   000096   78..         MOV     R0,#?V0
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009B   75..01       MOV     ?V0,#0x1
   \   00009E   78..         MOV     R0,#?V0
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A3   7C00         MOV     R4,#0x0
   \   0000A5   7D00         MOV     R5,#0x0
   \   0000A7   7A..         MOV     R2,#topoBuffer & 0xff
   \   0000A9   7B..         MOV     R3,#(topoBuffer >> 8) & 0xff
   \   0000AB   79F0         MOV     R1,#-0x10
   \   0000AD   12....       LCALL   `??SendData::?relay` ; Banked call to: SendData
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
    195                              HalLedBlink( HAL_LED_2, 4, 50, 250 );
   \   0000B5                ; Setup parameters for call to function HalLedBlink
   \   0000B5   7CFA         MOV     R4,#-0x6
   \   0000B7   7D00         MOV     R5,#0x0
   \   0000B9   7B32         MOV     R3,#0x32
   \   0000BB   7A04         MOV     R2,#0x4
   \                     ??sapp_controlEpProcess_5:
   \   0000BD   7902         MOV     R1,#0x2
   \                     ??sapp_controlEpProcess_6:
   \   0000BF   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    196                          }
    197                      }
    198                      break;
    199                      default:
    200                          break;
    201                      }
    202                      // Release the memory
    203                      osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??sapp_controlEpProcess_4:
   \   0000C2                ; Setup parameters for call to function osal_msg_deallocate
   \   0000C2   EE           MOV     A,R6
   \   0000C3   FA           MOV     R2,A
   \   0000C4   EF           MOV     A,R7
   \   0000C5   FB           MOV     R3,A
   \   0000C6   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    204                      // Next - if one is available
    205                      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   0000C9                ; Setup parameters for call to function osal_msg_receive
   \   0000C9   A9..         MOV     R1,?V3
   \                     ??sapp_controlEpProcess_1:
   \   0000CB   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   0000CE   8A..         MOV     ?V0,R2
   \   0000D0   8B..         MOV     ?V1,R3
   \   0000D2   AE..         MOV     R6,?V0
   \   0000D4   AF..         MOV     R7,?V1
   \   0000D6   EE           MOV     A,R6
   \   0000D7   4F           ORL     A,R7
   \   0000D8   7003         JNZ     $+5
   \   0000DA   02....       LJMP    ??sapp_controlEpProcess_7 & 0xFFFF
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   14           DEC     A
   \   0000E3   6010         JZ      ??sapp_controlEpProcess_8
   \   0000E5   24E7         ADD     A,#-0x19
   \   0000E7   7003         JNZ     $+5
   \   0000E9   02....       LJMP    ??sapp_controlEpProcess_9 & 0xFFFF
   \   0000EC   2449         ADD     A,#0x49
   \   0000EE   7003         JNZ     $+5
   \   0000F0   02....       LJMP    ??sapp_controlEpProcess_2 & 0xFFFF
   \   0000F3   80CD         SJMP    ??sapp_controlEpProcess_4
   \                     ??sapp_controlEpProcess_8:
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F8           MOV     R0,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F9           MOV     R1,A
   \   0000FC   E8           MOV     A,R0
   \   0000FD   FA           MOV     R2,A
   \   0000FE   E9           MOV     A,R1
   \   0000FF   FB           MOV     R3,A
   \   000100   90....       MOV     DPTR,#curNwkState
   \   000103   E0           MOVX    A,@DPTR
   \   000104   6409         XRL     A,#0x9
   \   000106   600A         JZ      ??sapp_controlEpProcess_10
   \   000108   E0           MOVX    A,@DPTR
   \   000109   6407         XRL     A,#0x7
   \   00010B   6005         JZ      ??sapp_controlEpProcess_10
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   6406         XRL     A,#0x6
   \   000110   7058         JNZ     ??sapp_controlEpProcess_11
   \                     ??sapp_controlEpProcess_10:
   \   000112   8A82         MOV     DPL,R2
   \   000114   8B83         MOV     DPH,R3
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   6418         XRL     A,#0x18
   \   00011C   7002         JNZ     ??sapp_controlEpProcess_12
   \   00011E   A3           INC     DPTR
   \   00011F   E0           MOVX    A,@DPTR
   \                     ??sapp_controlEpProcess_12:
   \   000120   7048         JNZ     ??sapp_controlEpProcess_11
   \   000122   8A82         MOV     DPL,R2
   \   000124   8B83         MOV     DPH,R3
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   64F1         XRL     A,#0xf1
   \   00012E   703A         JNZ     ??sapp_controlEpProcess_11
   \   000130                ; Setup parameters for call to function SendData
   \   000130   8A82         MOV     DPL,R2
   \   000132   8B83         MOV     DPH,R3
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   24FA         ADD     A,#-0x6
   \   000139   F5..         MOV     ?V0,A
   \   00013B   78..         MOV     R0,#?V0
   \   00013D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000140   8A82         MOV     DPL,R2
   \   000142   8B83         MOV     DPH,R3
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000152   8A82         MOV     DPL,R2
   \   000154   8B83         MOV     DPH,R3
   \   000156   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000159   EA           MOV     A,R2
   \   00015A   2409         ADD     A,#0x9
   \   00015C   FA           MOV     R2,A
   \   00015D   5001         JNC     ??sapp_controlEpProcess_13
   \   00015F   0B           INC     R3
   \                     ??sapp_controlEpProcess_13:
   \   000160   7901         MOV     R1,#0x1
   \   000162   12....       LCALL   `??SendData::?relay` ; Banked call to: SendData
   \   000165   7402         MOV     A,#0x2
   \   000167   12....       LCALL   ?DEALLOC_XSTACK8
    206                  }
    207                  // return unprocessed events
    208                  return (events ^ SYS_EVENT_MSG);
    209              }
   \                     ??sapp_controlEpProcess_11:
   \   00016A                ; Setup parameters for call to function HalLedBlink
   \   00016A   7C5A         MOV     R4,#0x5a
   \   00016C   7D00         MOV     R5,#0x0
   \   00016E   7B32         MOV     R3,#0x32
   \   000170   7A02         MOV     R2,#0x2
   \   000172   7901         MOV     R1,#0x1
   \   000174   02....       LJMP    ??sapp_controlEpProcess_6 & 0xFFFF
   \                     ??sapp_controlEpProcess_9:
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   6401         XRL     A,#0x1
   \   00017E   7002         JNZ     ??sapp_controlEpProcess_14
   \   000180   A3           INC     DPTR
   \   000181   E0           MOVX    A,@DPTR
   \                     ??sapp_controlEpProcess_14:
   \   000182   6003         JZ      $+5
   \   000184   02....       LJMP    ??sapp_controlEpProcess_4 & 0xFFFF
   \   000187   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00018A   F8           MOV     R0,A
   \   00018B   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   14           DEC     A
   \   000190   6009         JZ      ??sapp_controlEpProcess_15
   \   000192   14           DEC     A
   \   000193   602B         JZ      ??sapp_controlEpProcess_16
   \   000195   14           DEC     A
   \   000196   6040         JZ      ??sapp_controlEpProcess_17
   \   000198   02....       LJMP    ??sapp_controlEpProcess_18 & 0xFFFF
   \                     ??sapp_controlEpProcess_15:
   \   00019B                ; Setup parameters for call to function SendData
   \   00019B   75F003       MOV     B,#0x3
   \   00019E   90....       MOV     DPTR,#funcCount
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   A4           MUL     AB
   \   0001A3   2402         ADD     A,#0x2
   \   0001A5   F5..         MOV     ?V0,A
   \   0001A7   78..         MOV     R0,#?V0
   \   0001A9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AC   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0001AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B2   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0001B5   90....       MOV     DPTR,#funcTableBuffer
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   FA           MOV     R2,A
   \   0001BA   A3           INC     DPTR
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   FB           MOV     R3,A
   \   0001BD   02....       LJMP    ??sapp_controlEpProcess_19 & 0xFFFF
   \                     ??sapp_controlEpProcess_16:
   \   0001C0                ; Setup parameters for call to function SendData
   \   0001C0   75..0E       MOV     ?V0,#0xe
   \   0001C3   78..         MOV     R0,#?V0
   \   0001C5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001C8   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0001CB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CE   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0001D1   7A..         MOV     R2,#topoBuffer & 0xff
   \   0001D3   7B..         MOV     R3,#(topoBuffer >> 8) & 0xff
   \   0001D5   02....       LJMP    ??sapp_controlEpProcess_19 & 0xFFFF
   \                     ??sapp_controlEpProcess_17:
   \   0001D8   7A00         MOV     R2,#0x0
   \   0001DA   8001         SJMP    ??sapp_controlEpProcess_20
   \                     ??sapp_controlEpProcess_21:
   \   0001DC   0A           INC     R2
   \                     ??sapp_controlEpProcess_20:
   \   0001DD   90....       MOV     DPTR,#funcTableBuffer
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   F8           MOV     R0,A
   \   0001E2   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0001E5   A3           INC     DPTR
   \   0001E6   E0           MOVX    A,@DPTR
   \   0001E7   F8           MOV     R0,A
   \   0001E8   EA           MOV     A,R2
   \   0001E9   C3           CLR     C
   \   0001EA   98           SUBB    A,R0
   \   0001EB   4003         JC      $+5
   \   0001ED   02....       LJMP    ??sapp_controlEpProcess_22 & 0xFFFF
   \   0001F0   EA           MOV     A,R2
   \   0001F1   75F003       MOV     B,#0x3
   \   0001F4   A4           MUL     AB
   \   0001F5   F8           MOV     R0,A
   \   0001F6   A9F0         MOV     R1,B
   \   0001F8   90....       MOV     DPTR,#funcTableBuffer
   \   0001FB   E0           MOVX    A,@DPTR
   \   0001FC   28           ADD     A,R0
   \   0001FD   FB           MOV     R3,A
   \   0001FE   A3           INC     DPTR
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   39           ADDC    A,R1
   \   000201   8B82         MOV     DPL,R3
   \   000203   F583         MOV     DPH,A
   \   000205   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000208   E0           MOVX    A,@DPTR
   \   000209   68           XRL     A,R0
   \   00020A   70D0         JNZ     ??sapp_controlEpProcess_21
   \   00020C   EA           MOV     A,R2
   \   00020D   75F003       MOV     B,#0x3
   \   000210   A4           MUL     AB
   \   000211   F8           MOV     R0,A
   \   000212   A9F0         MOV     R1,B
   \   000214   90....       MOV     DPTR,#funcTableBuffer
   \   000217   E0           MOVX    A,@DPTR
   \   000218   28           ADD     A,R0
   \   000219   A3           INC     DPTR
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   39           ADDC    A,R1
   \   00021C   8B82         MOV     DPL,R3
   \   00021E   F583         MOV     DPH,A
   \   000220   A3           INC     DPTR
   \   000221   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000224   A3           INC     DPTR
   \   000225   E0           MOVX    A,@DPTR
   \   000226   68           XRL     A,R0
   \   000227   70B3         JNZ     ??sapp_controlEpProcess_21
   \   000229   90....       MOV     DPTR,#`?<Constant {3, 0, 0}>`
   \   00022C   AC..         MOV     R4,?XSP + 0
   \   00022E   AD..         MOV     R5,?XSP + 1
   \   000230   7403         MOV     A,#0x3
   \   000232   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000235   04           INC     A
   \   000236   2A           ADD     A,R2
   \   000237   C0E0         PUSH    A
   \   000239   7401         MOV     A,#0x1
   \   00023B   12....       LCALL   ?XSTACK_DISP0_8
   \   00023E   D0E0         POP     A
   \   000240   F0           MOVX    @DPTR,A
   \   000241   EA           MOV     A,R2
   \   000242   75F003       MOV     B,#0x3
   \   000245   A4           MUL     AB
   \   000246   F8           MOV     R0,A
   \   000247   A9F0         MOV     R1,B
   \   000249   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00024C   E0           MOVX    A,@DPTR
   \   00024D   C0E0         PUSH    A
   \   00024F   7402         MOV     A,#0x2
   \   000251   12....       LCALL   ?XSTACK_DISP0_8
   \   000254   D0E0         POP     A
   \   000256   F0           MOVX    @DPTR,A
   \   000257                ; Setup parameters for call to function SendData
   \   000257   75..03       MOV     ?V0,#0x3
   \   00025A   78..         MOV     R0,#?V0
   \   00025C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00025F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000262   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000265   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000268   7402         MOV     A,#0x2
   \   00026A   12....       LCALL   ?XSTACK_DISP101_8
   \                     ??sapp_controlEpProcess_19:
   \   00026D   79F0         MOV     R1,#-0x10
   \   00026F   12....       LCALL   `??SendData::?relay` ; Banked call to: SendData
   \   000272   7402         MOV     A,#0x2
   \   000274   12....       LCALL   ?DEALLOC_XSTACK8
   \   000277   8029         SJMP    ??sapp_controlEpProcess_22
   \                     ??sapp_controlEpProcess_18:
   \   000279   75..00       MOV     ?V0,#0x0
   \   00027C   75..00       MOV     ?V1,#0x0
   \   00027F   801C         SJMP    ??sapp_controlEpProcess_23
   \                     ??sapp_controlEpProcess_24:
   \   000281   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000284   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000287   600C         JZ      ??sapp_controlEpProcess_25
   \   000289                ; Setup parameters for indirect call
   \   000289   EE           MOV     A,R6
   \   00028A   FC           MOV     R4,A
   \   00028B   EF           MOV     A,R7
   \   00028C   FD           MOV     R5,A
   \   00028D   7904         MOV     R1,#0x4
   \   00028F   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000292   12....       LCALL   ?CALL_IND
   \                     ??sapp_controlEpProcess_25:
   \   000295   05..         INC     ?V0
   \   000297   E5..         MOV     A,?V0
   \   000299   7002         JNZ     ??sapp_controlEpProcess_23
   \   00029B   05..         INC     ?V1
   \                     ??sapp_controlEpProcess_23:
   \   00029D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0002A0   40DF         JC      ??sapp_controlEpProcess_24
   \                     ??sapp_controlEpProcess_22:
   \   0002A2                ; Setup parameters for call to function HalLedBlink
   \   0002A2   7CFA         MOV     R4,#-0x6
   \   0002A4   7D00         MOV     R5,#0x0
   \   0002A6   7B32         MOV     R3,#0x32
   \   0002A8   7A01         MOV     R2,#0x1
   \   0002AA   02....       LJMP    ??sapp_controlEpProcess_5 & 0xFFFF
   \                     ??sapp_controlEpProcess_7:
   \   0002AD   AA..         MOV     R2,?V4
   \   0002AF   E5..         MOV     A,?V5
   \   0002B1   6480         XRL     A,#0x80
   \   0002B3   FB           MOV     R3,A
   \   0002B4   807B         SJMP    ??sapp_controlEpProcess_26
    210              // 定时器时间到, 遍历所有端点看是否有userTimer
    211              if(events & SAPP_SEND_PERIODIC_MSG_EVT)
   \                     ??sapp_controlEpProcess_0:
   \   0002B6   EA           MOV     A,R2
   \   0002B7   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002B9   5072         JNC     ??sapp_controlEpProcess_27
    212              {
    213                  int i;
    214                  uint8 hasUserTimer = 0;
   \   0002BB   7E00         MOV     R6,#0x0
    215                  for(i = 0; i < funcCount; i++)
   \   0002BD   8E..         MOV     ?V0,R6
   \   0002BF   8E..         MOV     ?V1,R6
   \   0002C1   803B         SJMP    ??sapp_controlEpProcess_28
    216                  {
    217                      struct ep_info_t *ep = &funcList[i];
   \                     ??sapp_controlEpProcess_29:
   \   0002C3   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0002C6   39           ADDC    A,R1
   \   0002C7   FB           MOV     R3,A
    218                      if(ep->userTimer && ep->res_available)
   \   0002C8   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0002CB   6029         JZ      ??sapp_controlEpProcess_30
   \   0002CD   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0002D0   6024         JZ      ??sapp_controlEpProcess_30
    219                      {
    220                          hasUserTimer = 1;
   \   0002D2   7E01         MOV     R6,#0x1
    221                          ep->userTimer = ep->userTimer - 1;
   \   0002D4   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0002D7   14           DEC     A
   \   0002D8   F0           MOVX    @DPTR,A
    222                          if(ep->userTimer <= 1)
   \   0002D9   C3           CLR     C
   \   0002DA   9402         SUBB    A,#0x2
   \   0002DC   5018         JNC     ??sapp_controlEpProcess_30
    223                          {
    224                              ep->userTimer = 0;
   \   0002DE   E4           CLR     A
   \   0002DF   F0           MOVX    @DPTR,A
    225                              (*ep->res_available)(ep, ResUserTimer, NULL);
   \   0002E0                ; Setup parameters for indirect call
   \   0002E0   FC           MOV     R4,A
   \   0002E1   FD           MOV     R5,A
   \   0002E2   7903         MOV     R1,#0x3
   \   0002E4   8A82         MOV     DPL,R2
   \   0002E6   8B83         MOV     DPH,R3
   \   0002E8   A3           INC     DPTR
   \   0002E9   A3           INC     DPTR
   \   0002EA   A3           INC     DPTR
   \   0002EB   A3           INC     DPTR
   \   0002EC   A3           INC     DPTR
   \   0002ED   A3           INC     DPTR
   \   0002EE   E0           MOVX    A,@DPTR
   \   0002EF   F8           MOV     R0,A
   \   0002F0   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    226                          }
    227                      }
    228                  }
   \                     ??CrossCallReturnLabel_70:
   \   0002F3   12....       LCALL   ?CALL_IND
   \                     ??sapp_controlEpProcess_30:
   \   0002F6   05..         INC     ?V0
   \   0002F8   E5..         MOV     A,?V0
   \   0002FA   7002         JNZ     ??sapp_controlEpProcess_28
   \   0002FC   05..         INC     ?V1
   \                     ??sapp_controlEpProcess_28:
   \   0002FE   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000301   40C0         JC      ??sapp_controlEpProcess_29
    229                  if(hasUserTimer)
   \   000303   EE           MOV     A,R6
   \   000304   A2E0         MOV     C,0xE0 /* A   */.0
   \   000306   500F         JNC     ??sapp_controlEpProcess_31
    230                  {
    231                      // 重新启动定时器
    232                      osal_start_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT, 1000);
   \   000308                ; Setup parameters for call to function osal_start_timerEx
   \   000308   7CE8         MOV     R4,#-0x18
   \   00030A   7D03         MOV     R5,#0x3
   \   00030C   7A01         MOV     R2,#0x1
   \   00030E   7B00         MOV     R3,#0x0
   \   000310   A9..         MOV     R1,?V3
   \   000312   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000315   800D         SJMP    ??sapp_controlEpProcess_32
    233                  }
    234                  else
    235                  {
    236                      isUserTimerRunning = 0;
   \                     ??sapp_controlEpProcess_31:
   \   000317   90....       MOV     DPTR,#isUserTimerRunning
   \   00031A   E4           CLR     A
   \   00031B   F0           MOVX    @DPTR,A
    237                      osal_stop_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT);
   \   00031C                ; Setup parameters for call to function osal_stop_timerEx
   \   00031C   7A01         MOV     R2,#0x1
   \   00031E   FB           MOV     R3,A
   \   00031F   A9..         MOV     R1,?V3
   \   000321   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    238                  }
    239                  // return unprocessed events
    240                  return (events ^ SAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??sapp_controlEpProcess_32:
   \   000324   E5..         MOV     A,?V4
   \   000326   6401         XRL     A,#0x1
   \   000328   FA           MOV     R2,A
   \   000329   AB..         MOV     R3,?V5
   \   00032B   8004         SJMP    ??sapp_controlEpProcess_26
    241              }
    242              // Discard unknown events
    243              return 0;
   \                     ??sapp_controlEpProcess_27:
   \   00032D   7A00         MOV     R2,#0x0
   \   00032F   7B00         MOV     R3,#0x0
   \                     ??sapp_controlEpProcess_26:
   \   000331   7403         MOV     A,#0x3
   \   000333   12....       LCALL   ?DEALLOC_XSTACK8
   \   000336   7F06         MOV     R7,#0x6
   \   000338   02....       LJMP    ?BANKED_LEAVE_XDATA
    244          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E5..         MOV     A,?V0
   \   000002   75F021       MOV     B,#0x21
   \   000005   A4           MUL     AB
   \   000006   F8           MOV     R0,A
   \   000007   AAF0         MOV     R2,B
   \   000009   75F021       MOV     B,#0x21
   \   00000C   E5..         MOV     A,?V1
   \   00000E   A4           MUL     AB
   \   00000F   2A           ADD     A,R2
   \   000010   F9           MOV     R1,A
   \   000011   74..         MOV     A,#funcList & 0xff
   \   000013   28           ADD     A,R0
   \   000014   FA           MOV     R2,A
   \   000015   74..         MOV     A,#(funcList >> 8) & 0xff
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009                REQUIRE ??Subroutine37_0
   \   000009                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F8           MOV     R0,A
   \   000004   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000007   F9           MOV     R1,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F583         MOV     DPH,A
   \   00000C   8982         MOV     DPL,R1
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#funcCount
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   C3           CLR     C
   \   000006   E5..         MOV     A,?V0
   \   000008   98           SUBB    A,R0
   \   000009   E5..         MOV     A,?V1
   \   00000B   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine39_0
   \   000004                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine40_0
   \   000002                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine41_0
   \   000001                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {3, 0, 0}>`:
   \   000000   03           DB 3
   \   000001   00           DB 0
   \   000002   00           DB 0
    245          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          uint16 sapp_functionEpProcess(uint8 task_id, uint16 events)
   \                     sapp_functionEpProcess:
    247          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V6,R2
   \   000014   8B..         MOV     ?V7,R3
    248              afIncomingMSGPacket_t *MSGpkt;
    249              if(events & SYS_EVENT_MSG)
   \   000016   EB           MOV     A,R3
   \   000017   5480         ANL     A,#0x80
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??sapp_functionEpProcess_0 & 0xFFFF
    250              {
    251                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   00001E                ; Setup parameters for call to function osal_msg_receive
   \   00001E   8037         SJMP    ??sapp_functionEpProcess_1
    252                  while ( MSGpkt )
    253                  {
    254                      switch ( MSGpkt->hdr.event )
    255                      {
    256                      // 接收到数据包
    257                      case AF_INCOMING_MSG_CMD:
    258                          {
    259                              switch ( MSGpkt->clusterId )
    260                              {
    261                              case SAPP_PERIODIC_CLUSTERID:
    262                                  if(MSGpkt->endPoint <= funcCount)
    263                                  {
    264                                      struct ep_info_t *ep = &funcList[MSGpkt->endPoint - 1];
    265                                      if(ep->incoming_data)
    266                                          (*ep->incoming_data)(ep, MSGpkt->srcAddr.addr.shortAddr, MSGpkt->srcAddr.endPoint, &MSGpkt->cmd);
    267                                  }
    268                                  HalLedBlink( HAL_LED_2, 1, 50, 250 );
    269                                  break;
    270                              }
    271                          }
    272                          break;
    273          
    274                      case ZDO_STATE_CHANGE:
    275                          {
    276                              curNwkState = (devStates_t)(MSGpkt->hdr.status);
    277                              if ( (curNwkState == DEV_ZB_COORD)
    278                                      || (curNwkState == DEV_ROUTER)
    279                                      || (curNwkState == DEV_END_DEVICE) )
    280                              {
    281                                  int i;
    282                                  int hasTimeOut = 0;
    283                                  for(i = 0; i < funcCount; i++)
    284                                  {
    285                                      struct ep_info_t *ep = &funcList[i];
    286                                      if(ep->nwk_stat_change)
    287                                          (*ep->nwk_stat_change)(ep);
    288                                      // 重置端点计数器
    289                                      if(ep->time_out && ep->function.cycle)
    290                                      {
    291                                          ep->timerTick = ep->function.cycle;
    292                                          hasTimeOut = 1;
    293                                      }
    294                                  }
    295                                  if(hasTimeOut)
    296                                  {
    297                                      // 加入网络成功,启动定时器,为各个端点提供定时
    298                                      osal_start_timerEx(task_id,
    299                                                         SAPP_SEND_PERIODIC_MSG_EVT,
    300                                                         1000);
    301                                  }
    302                              }
    303                              else
    304                                  osal_stop_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT);
    305                          }
    306                          break;
    307                      case IOPORT_INT_EVENT:
    308                        {
    309                          OSALIOIntData_t* IOIntData;
    310                          IOIntData =(OSALIOIntData_t*)MSGpkt;
    311                          if(IOIntData->endPoint <= funcCount)
   \                     ??sapp_functionEpProcess_2:
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000025   4021         JC      ??sapp_functionEpProcess_3
    312                          {
    313                              struct ep_info_t *ep = &funcList[IOIntData->endPoint - 1];
   \   000027   85..82       MOV     DPL,?V0
   \   00002A   85..83       MOV     DPH,?V1
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000032   12....       LCALL   ?Subroutine3 & 0xFFFF
    314                              if(ep->res_available)
   \                     ??CrossCallReturnLabel_53:
   \   000035   6011         JZ      ??sapp_functionEpProcess_3
    315                                  (*ep->res_available)(ep, ResIOInt, IOIntData->arg);
   \   000037                ; Setup parameters for indirect call
   \   000037   85..82       MOV     DPL,?V0
   \   00003A   85..83       MOV     DPH,?V1
   \   00003D   12....       LCALL   ??Subroutine41_0 & 0xFFFF
    316                          }
    317                        }
   \                     ??CrossCallReturnLabel_77:
   \   000040   7905         MOV     R1,#0x5
   \   000042   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000045   12....       LCALL   ?CALL_IND
    318                        break;
    319          #if defined(HAL_IRDEC) && (HAL_IRDEC == TRUE)
    320                      case IRDEC_INT_EVENT:   //
    321                        {
    322                          OSALIRDecIntData_t* TimerIntData = (OSALIRDecIntData_t*)MSGpkt;
    323                          if(TimerIntData->endPoint <= funcCount)
    324                          {
    325                              struct ep_info_t *ep = &funcList[TimerIntData->endPoint - 1];
    326                              if(ep->res_available)
    327                                  (*ep->res_available)(ep, ResTimerInt, TimerIntData->data);
    328                          }
    329                        }
    330                        break;
    331          #endif
    332                      default:
    333                          break;
    334                      }
    335                      // Release the memory
    336                      osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??sapp_functionEpProcess_3:
   \   000048                ; Setup parameters for call to function osal_msg_deallocate
   \   000048   AA..         MOV     R2,?V0
   \   00004A   AB..         MOV     R3,?V1
   \   00004C   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    337                      // Next - if one is available
    338                      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   00004F                ; Setup parameters for call to function osal_msg_receive
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F9           MOV     R1,A
   \                     ??sapp_functionEpProcess_1:
   \   000057   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00005A   8A..         MOV     ?V0,R2
   \   00005C   8B..         MOV     ?V1,R3
   \   00005E   E5..         MOV     A,?V0
   \   000060   45..         ORL     A,?V1
   \   000062   7003         JNZ     $+5
   \   000064   02....       LJMP    ??sapp_functionEpProcess_4 & 0xFFFF
   \   000067   85..82       MOV     DPL,?V0
   \   00006A   85..83       MOV     DPH,?V1
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   24E6         ADD     A,#-0x1a
   \   000070   600A         JZ      ??sapp_functionEpProcess_5
   \   000072   2449         ADD     A,#0x49
   \   000074   6075         JZ      ??sapp_functionEpProcess_6
   \   000076   24E1         ADD     A,#-0x1f
   \   000078   60A6         JZ      ??sapp_functionEpProcess_2
   \   00007A   80CC         SJMP    ??sapp_functionEpProcess_3
   \                     ??sapp_functionEpProcess_5:
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6401         XRL     A,#0x1
   \   000083   7002         JNZ     ??sapp_functionEpProcess_7
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \                     ??sapp_functionEpProcess_7:
   \   000087   70BF         JNZ     ??sapp_functionEpProcess_3
   \   000089   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00008C   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00008F   404A         JC      ??sapp_functionEpProcess_8
   \   000091   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000094   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000097   39           ADDC    A,R1
   \   000098   FB           MOV     R3,A
   \   000099   8A82         MOV     DPL,R2
   \   00009B   8B83         MOV     DPH,R3
   \   00009D   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000A0   6039         JZ      ??sapp_functionEpProcess_8
   \   0000A2                ; Setup parameters for indirect call
   \   0000A2   E5..         MOV     A,?V0
   \   0000A4   241F         ADD     A,#0x1f
   \   0000A6   F5..         MOV     ?V2,A
   \   0000A8   E4           CLR     A
   \   0000A9   35..         ADDC    A,?V1
   \   0000AB   F5..         MOV     ?V3,A
   \   0000AD   78..         MOV     R0,#?V2
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B2   E5..         MOV     A,?V0
   \   0000B4   240F         ADD     A,#0xf
   \   0000B6   F582         MOV     DPL,A
   \   0000B8   E4           CLR     A
   \   0000B9   35..         ADDC    A,?V1
   \   0000BB   F583         MOV     DPH,A
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F9           MOV     R1,A
   \   0000BF   85..82       MOV     DPL,?V0
   \   0000C2   85..83       MOV     DPH,?V1
   \   0000C5   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000C8   8A82         MOV     DPL,R2
   \   0000CA   8B83         MOV     DPH,R3
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F8           MOV     R0,A
   \   0000D0   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000D3   12....       LCALL   ?CALL_IND
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??sapp_functionEpProcess_8:
   \   0000DB                ; Setup parameters for call to function HalLedBlink
   \   0000DB   7CFA         MOV     R4,#-0x6
   \   0000DD   7D00         MOV     R5,#0x0
   \   0000DF   7B32         MOV     R3,#0x32
   \   0000E1   7A01         MOV     R2,#0x1
   \   0000E3   7902         MOV     R1,#0x2
   \   0000E5   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
   \   0000E8   02....       LJMP    ??sapp_functionEpProcess_3 & 0xFFFF
   \                     ??sapp_functionEpProcess_6:
   \   0000EB   A3           INC     DPTR
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   90....       MOV     DPTR,#curNwkState
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   6409         XRL     A,#0x9
   \   0000F3   600D         JZ      ??sapp_functionEpProcess_9
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   6407         XRL     A,#0x7
   \   0000F8   6008         JZ      ??sapp_functionEpProcess_9
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   6406         XRL     A,#0x6
   \   0000FD   6003         JZ      $+5
   \   0000FF   02....       LJMP    ??sapp_functionEpProcess_10 & 0xFFFF
   \                     ??sapp_functionEpProcess_9:
   \   000102   7E00         MOV     R6,#0x0
   \   000104   8E..         MOV     ?V4,R6
   \   000106   8E..         MOV     ?V5,R6
   \   000108   8068         SJMP    ??sapp_functionEpProcess_11
   \                     ??sapp_functionEpProcess_12:
   \   00010A   E5..         MOV     A,?V4
   \   00010C   75F021       MOV     B,#0x21
   \   00010F   A4           MUL     AB
   \   000110   F8           MOV     R0,A
   \   000111   AAF0         MOV     R2,B
   \   000113   75F021       MOV     B,#0x21
   \   000116   E5..         MOV     A,?V5
   \   000118   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00011B   F5..         MOV     ?V2,A
   \   00011D   74..         MOV     A,#(funcList >> 8) & 0xff
   \   00011F   39           ADDC    A,R1
   \   000120   F5..         MOV     ?V3,A
   \   000122   85..82       MOV     DPL,?V2
   \   000125   F583         MOV     DPH,A
   \   000127   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00012A   600E         JZ      ??sapp_functionEpProcess_13
   \   00012C                ; Setup parameters for indirect call
   \   00012C   AA..         MOV     R2,?V2
   \   00012E   AB..         MOV     R3,?V3
   \   000130   8A82         MOV     DPL,R2
   \   000132   8B83         MOV     DPH,R3
   \   000134   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000137   12....       LCALL   ?CALL_IND
   \                     ??sapp_functionEpProcess_13:
   \   00013A   85..82       MOV     DPL,?V2
   \   00013D   85..83       MOV     DPH,?V3
   \   000140   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000143   6025         JZ      ??sapp_functionEpProcess_14
   \   000145   85..82       MOV     DPL,?V2
   \   000148   85..83       MOV     DPH,?V3
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   6012         JZ      ??sapp_functionEpProcess_14
   \   000158   C0E0         PUSH    A
   \   00015A   E5..         MOV     A,?V2
   \   00015C   240D         ADD     A,#0xd
   \   00015E   F582         MOV     DPL,A
   \   000160   E4           CLR     A
   \   000161   35..         ADDC    A,?V3
   \   000163   F583         MOV     DPH,A
   \   000165   D0E0         POP     A
   \   000167   F0           MOVX    @DPTR,A
   \   000168   7E01         MOV     R6,#0x1
   \                     ??sapp_functionEpProcess_14:
   \   00016A   05..         INC     ?V4
   \   00016C   E5..         MOV     A,?V4
   \   00016E   7002         JNZ     ??sapp_functionEpProcess_11
   \   000170   05..         INC     ?V5
   \                     ??sapp_functionEpProcess_11:
   \   000172   90....       MOV     DPTR,#funcCount
   \   000175   E0           MOVX    A,@DPTR
   \   000176   F8           MOV     R0,A
   \   000177   C3           CLR     C
   \   000178   E5..         MOV     A,?V4
   \   00017A   98           SUBB    A,R0
   \   00017B   E5..         MOV     A,?V5
   \   00017D   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000180   4088         JC      ??sapp_functionEpProcess_12
   \   000182   EE           MOV     A,R6
   \   000183   A2E0         MOV     C,0xE0 /* A   */.0
   \   000185   4003         JC      $+5
   \   000187   02....       LJMP    ??sapp_functionEpProcess_3 & 0xFFFF
   \   00018A                ; Setup parameters for call to function osal_start_timerEx
   \   00018A   7CE8         MOV     R4,#-0x18
   \   00018C   7D03         MOV     R5,#0x3
   \   00018E   7A01         MOV     R2,#0x1
   \   000190   7B00         MOV     R3,#0x0
   \   000192   85..82       MOV     DPL,?XSP + 0
   \   000195   85..83       MOV     DPH,?XSP + 1
   \   000198   E0           MOVX    A,@DPTR
   \   000199   F9           MOV     R1,A
   \   00019A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00019D   02....       LJMP    ??sapp_functionEpProcess_3 & 0xFFFF
   \                     ??sapp_functionEpProcess_10:
   \   0001A0                ; Setup parameters for call to function osal_stop_timerEx
   \   0001A0   7A01         MOV     R2,#0x1
   \   0001A2   7B00         MOV     R3,#0x0
   \   0001A4   85..82       MOV     DPL,?XSP + 0
   \   0001A7   85..83       MOV     DPH,?XSP + 1
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   F9           MOV     R1,A
   \   0001AC   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0001AF   02....       LJMP    ??sapp_functionEpProcess_3 & 0xFFFF
    339                  }
    340                  // return unprocessed events
    341                  return (events ^ SYS_EVENT_MSG);
   \                     ??sapp_functionEpProcess_4:
   \   0001B2   AA..         MOV     R2,?V6
   \   0001B4   E5..         MOV     A,?V7
   \   0001B6   6480         XRL     A,#0x80
   \   0001B8   FB           MOV     R3,A
   \   0001B9   02....       LJMP    ??sapp_functionEpProcess_15 & 0xFFFF
    342              }
    343          
    344              // 定时器时间到, 遍历所有端点看是否有需要调用time_out
    345              if(events & SAPP_SEND_PERIODIC_MSG_EVT)
   \                     ??sapp_functionEpProcess_0:
   \   0001BC   EA           MOV     A,R2
   \   0001BD   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001BF   4003         JC      $+5
   \   0001C1   02....       LJMP    ??sapp_functionEpProcess_16 & 0xFFFF
    346              {
    347                  int i;
    348                  for(i = 0; i < funcCount; i++)
   \   0001C4   75..00       MOV     ?V0,#0x0
   \   0001C7   75..00       MOV     ?V1,#0x0
   \   0001CA   806B         SJMP    ??sapp_functionEpProcess_17
    349                  {
    350                      struct ep_info_t *ep = &funcList[i];
   \                     ??sapp_functionEpProcess_18:
   \   0001CC   E5..         MOV     A,?V0
   \   0001CE   75F021       MOV     B,#0x21
   \   0001D1   A4           MUL     AB
   \   0001D2   F8           MOV     R0,A
   \   0001D3   AAF0         MOV     R2,B
   \   0001D5   75F021       MOV     B,#0x21
   \   0001D8   E5..         MOV     A,?V1
   \   0001DA   12....       LCALL   ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0001DD   FE           MOV     R6,A
   \   0001DE   74..         MOV     A,#(funcList >> 8) & 0xff
   \   0001E0   39           ADDC    A,R1
   \   0001E1   FF           MOV     R7,A
    351                      if(ep->time_out && ep->function.cycle)
   \   0001E2   8E82         MOV     DPL,R6
   \   0001E4   8F83         MOV     DPH,R7
   \   0001E6   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0001E9   6044         JZ      ??sapp_functionEpProcess_19
   \   0001EB   8E82         MOV     DPL,R6
   \   0001ED   8F83         MOV     DPH,R7
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   A3           INC     DPTR
   \   0001F5   A3           INC     DPTR
   \   0001F6   A3           INC     DPTR
   \   0001F7   A3           INC     DPTR
   \   0001F8   A3           INC     DPTR
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   6033         JZ      ??sapp_functionEpProcess_19
    352                      {
    353                          // 端点需要周期执行
    354                          ep->timerTick = ep->timerTick - 1;
   \   0001FC   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0001FF   E0           MOVX    A,@DPTR
   \   000200   14           DEC     A
   \   000201   F0           MOVX    @DPTR,A
    355                          if(ep->timerTick == 0)
   \   000202   702B         JNZ     ??sapp_functionEpProcess_19
    356                          {
    357                            // 定时时间到,执行time_out函数
    358                            (*ep->time_out)(ep);
   \   000204                ; Setup parameters for indirect call
   \   000204   EE           MOV     A,R6
   \   000205   FA           MOV     R2,A
   \   000206   EF           MOV     A,R7
   \   000207   FB           MOV     R3,A
   \   000208   8E82         MOV     DPL,R6
   \   00020A   8F83         MOV     DPH,R7
   \   00020C   A3           INC     DPTR
   \   00020D   A3           INC     DPTR
   \   00020E   A3           INC     DPTR
   \   00020F   A3           INC     DPTR
   \   000210   E0           MOVX    A,@DPTR
   \   000211   F8           MOV     R0,A
   \   000212   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000215   12....       LCALL   ?CALL_IND
    359                            ep->timerTick = ep->function.cycle;
   \   000218   8E82         MOV     DPL,R6
   \   00021A   8F83         MOV     DPH,R7
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   A3           INC     DPTR
   \   000221   A3           INC     DPTR
   \   000222   A3           INC     DPTR
   \   000223   A3           INC     DPTR
   \   000224   A3           INC     DPTR
   \   000225   A3           INC     DPTR
   \   000226   E0           MOVX    A,@DPTR
   \   000227   C0E0         PUSH    A
   \   000229   12....       LCALL   ?Subroutine24 & 0xFFFF
    360                          }
    361                      }
    362          #if 0
    363                      if(ep->userTimer && ep->res_available)
    364                      {
    365                          ep->userTimer = ep->userTimer - 1;
    366                          if(ep->userTimer <= 1)
    367                          {
    368                              (*ep->res_available)(ep, ResUserTimer, NULL);
    369                              ep->userTimer = 0;
    370                          }
    371                      }
    372          #endif
    373                  }
   \                     ??CrossCallReturnLabel_35:
   \   00022C   D0E0         POP     A
   \   00022E   F0           MOVX    @DPTR,A
   \                     ??sapp_functionEpProcess_19:
   \   00022F   05..         INC     ?V0
   \   000231   E5..         MOV     A,?V0
   \   000233   7002         JNZ     ??sapp_functionEpProcess_17
   \   000235   05..         INC     ?V1
   \                     ??sapp_functionEpProcess_17:
   \   000237   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00023A   4090         JC      ??sapp_functionEpProcess_18
    374                  // 重新启动定时器
    375                  osal_start_timerEx(task_id, SAPP_SEND_PERIODIC_MSG_EVT, 1000);
   \   00023C                ; Setup parameters for call to function osal_start_timerEx
   \   00023C   7CE8         MOV     R4,#-0x18
   \   00023E   7D03         MOV     R5,#0x3
   \   000240   7A01         MOV     R2,#0x1
   \   000242   7B00         MOV     R3,#0x0
   \   000244   85..82       MOV     DPL,?XSP + 0
   \   000247   85..83       MOV     DPH,?XSP + 1
   \   00024A   E0           MOVX    A,@DPTR
   \   00024B   F9           MOV     R1,A
   \   00024C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    376                  // return unprocessed events
    377                  return (events ^ SAPP_SEND_PERIODIC_MSG_EVT);
   \   00024F   E5..         MOV     A,?V6
   \   000251   6401         XRL     A,#0x1
   \   000253   FA           MOV     R2,A
   \   000254   AB..         MOV     R3,?V7
   \   000256   8004         SJMP    ??sapp_functionEpProcess_15
    378              }
    379              // Discard unknown events
    380              return 0;
   \                     ??sapp_functionEpProcess_16:
   \   000258   7A00         MOV     R2,#0x0
   \   00025A   7B00         MOV     R3,#0x0
   \                     ??sapp_functionEpProcess_15:
   \   00025C                REQUIRE ?Subroutine1
   \   00025C                ; // Fall through to label ?Subroutine1
    381          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F08         MOV     R7,#0x8
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EE           MOV     A,R6
   \   000001   240D         ADD     A,#0xd
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E5..         MOV     A,?V0
   \   000002   2414         ADD     A,#0x14
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   90....       MOV     DPTR,#funcCount
   \   000005   E0           MOVX    A,@DPTR
   \   000006   C3           CLR     C
   \   000007   98           SUBB    A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   75F021       MOV     B,#0x21
   \   000004   A4           MUL     AB
   \   000005   F8           MOV     R0,A
   \   000006   A9F0         MOV     R1,B
   \   000008   74..         MOV     A,#(funcList + 223) & 0xff
   \   00000A   28           ADD     A,R0
   \   00000B   FA           MOV     R2,A
   \   00000C   74..         MOV     A,#((funcList - 33) >> 8) & 0xff
   \   00000E   22           RET
    382          
    383          #if defined(ZDO_COORDINATOR)
    384          static uint8 uartMsgProcesser(uint8 *msg)
    385          {
    386              mtOSALSerialData_t *pMsg = (mtOSALSerialData_t *)msg;
    387              mtUserSerialMsg_t *pMsgBody = (mtUserSerialMsg_t *)pMsg->msg;
    388              if ( (curNwkState != DEV_ZB_COORD)
    389                      && (curNwkState != DEV_ROUTER)
    390                      && (curNwkState != DEV_END_DEVICE) )
    391                  return 1;
    392              switch(pMsgBody->cmd)
    393              {
    394              case 0x0018:
    395                  {
    396                      switch(pMsgBody->cmdEndPoint)
    397                      {
    398                      case 0xF1:
    399                          {
    400                              // 转发数据
    401                              SendData(TRANSFER_ENDPOINT, pMsgBody->data,
    402                                       pMsgBody->addr, pMsgBody->endPoint,
    403                                       pMsgBody->len - 6);
    404                          }
    405                          break;
    406                      }
    407                  }
    408                  break;
    409              }
    410              return 1;
    411          }
    412          #endif
    413          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    414          uint8 SendData(uint8 srcEP, const void *buf, uint16 addr, uint8 dstEP, uint8 Len)
   \                     SendData:
    415          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
    416              static uint8 transID = 0;
    417              afAddrType_t SendDataAddr;
    418              struct ep_info_t *epInfo;
    419          
    420              if(srcEP <= funcCount)
   \   000010   90....       MOV     DPTR,#funcCount
   \   000013   E0           MOVX    A,@DPTR
   \   000014   C3           CLR     C
   \   000015   9E           SUBB    A,R6
   \   000016   4016         JC      ??SendData_0
    421                  epInfo = &funcList[srcEP - 1];
   \   000018   EE           MOV     A,R6
   \   000019   75F021       MOV     B,#0x21
   \   00001C   A4           MUL     AB
   \   00001D   F8           MOV     R0,A
   \   00001E   A9F0         MOV     R1,B
   \   000020   74..         MOV     A,#(funcList + 223) & 0xff
   \   000022   28           ADD     A,R0
   \   000023   F8           MOV     R0,A
   \   000024   74..         MOV     A,#((funcList - 33) >> 8) & 0xff
   \   000026   39           ADDC    A,R1
   \   000027   F9           MOV     R1,A
   \   000028   E8           MOV     A,R0
   \   000029   FA           MOV     R2,A
   \   00002A   E9           MOV     A,R1
   \   00002B   FB           MOV     R3,A
   \   00002C   8004         SJMP    ??SendData_1
    422              else
    423                  epInfo = &controlEndPointInfo;
   \                     ??SendData_0:
   \   00002E   7A..         MOV     R2,#controlEndPointInfo & 0xff
   \   000030   7B..         MOV     R3,#(controlEndPointInfo >> 8) & 0xff
    424          
    425              SendDataAddr.addrMode = (afAddrMode_t)Addr16Bit;         //短地址发送
   \                     ??SendData_1:
   \   000032   7408         MOV     A,#0x8
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   7402         MOV     A,#0x2
   \   000039   F0           MOVX    @DPTR,A
    426              SendDataAddr.endPoint = dstEP;
   \   00003A   7418         MOV     A,#0x18
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   C0E0         PUSH    A
   \   000042   7409         MOV     A,#0x9
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   D0E0         POP     A
   \   000049   F0           MOVX    @DPTR,A
    427              SendDataAddr.addr.shortAddr = addr;
   \   00004A   85..82       MOV     DPL,?XSP + 0
   \   00004D   85..83       MOV     DPH,?XSP + 1
   \   000050   EC           MOV     A,R4
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   ED           MOV     A,R5
   \   000054   F0           MOVX    @DPTR,A
    428              if ( AF_DataRequest( &SendDataAddr, //发送的地址和模式
    429                                   // TODO:
    430                                   &epInfo->SampleApp_epDesc,   //终端（比如操作系统中任务ID等）
    431                                   SAPP_PERIODIC_CLUSTERID,//发送串ID
    432                                   Len,
    433                                   (uint8*)buf,
    434                                   &transID,  //信息ID（操作系统参数）
    435                                   AF_DISCV_ROUTE,
    436                                   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000055                ; Setup parameters for call to function AF_DataRequest
   \   000055   75..1E       MOV     ?V2,#0x1e
   \   000058   78..         MOV     R0,#?V2
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005D   75....       MOV     ?V2,#??transID & 0xff
   \   000060   75....       MOV     ?V3,#(??transID >> 8) & 0xff
   \   000063   78..         MOV     R0,#?V2
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   78..         MOV     R0,#?V0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   741E         MOV     A,#0x1e
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F5..         MOV     ?V0,A
   \   000075   75..00       MOV     ?V1,#0x0
   \   000078   78..         MOV     R0,#?V0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   75..01       MOV     ?V0,#0x1
   \   000080   78..         MOV     R0,#?V0
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000085   7920         MOV     R1,#0x20
   \   000087   EA           MOV     A,R2
   \   000088   240F         ADD     A,#0xf
   \   00008A   FC           MOV     R4,A
   \   00008B   E4           CLR     A
   \   00008C   3B           ADDC    A,R3
   \   00008D   FD           MOV     R5,A
   \   00008E   7409         MOV     A,#0x9
   \   000090   12....       LCALL   ?XSTACK_DISP101_8
   \   000093   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000096   7409         MOV     A,#0x9
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009B   E9           MOV     A,R1
   \   00009C   7011         JNZ     ??SendData_2
    437              {
    438                  HalLedBlink( HAL_LED_1, 1, 50, 250 );
   \   00009E                ; Setup parameters for call to function HalLedBlink
   \   00009E   7CFA         MOV     R4,#-0x6
   \   0000A0   7D00         MOV     R5,#0x0
   \   0000A2   7B32         MOV     R3,#0x32
   \   0000A4   7A01         MOV     R2,#0x1
   \   0000A6   7901         MOV     R1,#0x1
   \   0000A8   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    439                  return 1;
   \   0000AB   7901         MOV     R1,#0x1
   \   0000AD   8002         SJMP    ??SendData_3
    440              }
    441              else
    442              {
    443                  return 0;
   \                     ??SendData_2:
   \   0000AF   7900         MOV     R1,#0x0
   \                     ??SendData_3:
   \   0000B1   740C         MOV     A,#0xc
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B6   7F04         MOV     R7,#0x4
   \   0000B8   02....       LJMP    ?BANKED_LEAVE_XDATA
    444              }
    445          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??transID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    446          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    447          void CreateUserTimer(struct ep_info_t *ep, uint8 seconds)
   \                     CreateUserTimer:
    448          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    449              if(ep == NULL)
   \   000007   EA           MOV     A,R2
   \   000008   4B           ORL     A,R3
   \   000009   6026         JZ      ??CreateUserTimer_0
    450                  return;
    451              if(ep->res_available == NULL)
   \   00000B   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00000E   6021         JZ      ??CreateUserTimer_0
    452                  return;
    453              ep->userTimer = seconds;
   \   000010   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000013   EE           MOV     A,R6
   \   000014   F0           MOVX    @DPTR,A
    454              if(isUserTimerRunning == 0)
   \   000015   90....       MOV     DPTR,#isUserTimerRunning
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7016         JNZ     ??CreateUserTimer_0
    455              {
    456                  osal_start_timerEx(controlTaskId,
    457                                     SAPP_SEND_PERIODIC_MSG_EVT,
    458                                     1000);
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   7CE8         MOV     R4,#-0x18
   \   00001D   7D03         MOV     R5,#0x3
   \   00001F   7A01         MOV     R2,#0x1
   \   000021   7B00         MOV     R3,#0x0
   \   000023   90....       MOV     DPTR,#controlTaskId
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    459                  isUserTimerRunning = 1;
   \   00002B   90....       MOV     DPTR,#isUserTimerRunning
   \   00002E   7401         MOV     A,#0x1
   \   000030   F0           MOVX    @DPTR,A
    460              }
    461          }
   \                     ??CreateUserTimer_0:
   \   000031   7F01         MOV     R7,#0x1
   \   000033   02....       LJMP    ?BANKED_LEAVE_XDATA
    462          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          void DeleteUserTimer(struct ep_info_t *ep)
   \                     DeleteUserTimer:
    464          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    465              if(ep == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6003         JZ      ??CrossCallReturnLabel_24
    466                  return;
    467              ep->userTimer = 0;
   \   000008   12....       LCALL   ?Subroutine19 & 0xFFFF
    468          }
   \                     ??CrossCallReturnLabel_24:
   \   00000B                REQUIRE ?Subroutine2
   \   00000B                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    469          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    470          void ModifyRefreshCycle(struct ep_info_t *ep, uint8 seconds)
   \                     ModifyRefreshCycle:
    471          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    472              if(ep == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6027         JZ      ??ModifyRefreshCycle_0
    473                  return;
    474              if(ep->time_out == NULL)
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00000F   EC           MOV     A,R4
   \   000010   4D           ORL     A,R5
   \   000011   601C         JZ      ??ModifyRefreshCycle_0
    475                  return;
    476              ep->function.cycle = seconds;
   \   000013   E9           MOV     A,R1
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   F0           MOVX    @DPTR,A
    477              if(ep->timerTick > seconds)
   \   000023   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   E9           MOV     A,R1
   \   000029   C3           CLR     C
   \   00002A   98           SUBB    A,R0
   \   00002B   5002         JNC     ??ModifyRefreshCycle_0
    478                  ep->timerTick = seconds;
   \   00002D   E9           MOV     A,R1
   \   00002E   F0           MOVX    @DPTR,A
    479          }
   \                     ??ModifyRefreshCycle_0:
   \   00002F   80..         SJMP    ?Subroutine2
    480          
    481          #if ! defined(ZDO_COORDINATOR) && defined(RTR_NWK)
    482          void RouterTimeoutRoutine(struct ep_info_t *ep)
    483          {
    484              SendData(ep->ep, (unsigned char *)&topoBuffer, 0x0000, TRANSFER_ENDPOINT, sizeof(TOPOINFO)); //节点向协调器发送采集数据
    485          }
    486          #endif
    487          
    488          #if defined(ZDO_COORDINATOR)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    489          void CoordinatorIncomingRoutine(struct ep_info_t *ep, uint16 addr, uint8 endPoint, afMSGCommandFormat_t *msg)
   \                     CoordinatorIncomingRoutine:
    490          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8C..         MOV     ?V6,R4
   \   000014   8D..         MOV     ?V7,R5
   \   000016   7411         MOV     A,#0x11
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V1,A
    491              //msg->Data[], msg->DataLength, msg->TransSeqNumber
    492              // 转发数据到串口
    493              if(msg->DataLength > 0)
   \   000022   85..82       MOV     DPL,?V0
   \   000025   F583         MOV     DPH,A
   \   000027   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00002A   7003         JNZ     $+5
   \   00002C   02....       LJMP    ??CoordinatorIncomingRoutine_0 & 0xFFFF
    494              {
    495                  mtUserSerialMsg_t *pMsg = osal_mem_alloc(sizeof(mtUserSerialMsg_t) + msg->DataLength - 1);
   \   00002F   85..82       MOV     DPL,?V0
   \   000032   85..83       MOV     DPH,?V1
   \   000035   A3           INC     DPTR
   \   000036   8582..       MOV     ?V2,DPL
   \   000039   8583..       MOV     ?V3,DPH
   \   00003C                ; Setup parameters for call to function osal_mem_alloc
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   2409         ADD     A,#0x9
   \   00003F   FA           MOV     R2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   3400         ADDC    A,#0x0
   \   000044   FB           MOV     R3,A
   \   000045   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000048   8A..         MOV     ?V4,R2
   \   00004A   8B..         MOV     ?V5,R3
   \   00004C   AE..         MOV     R6,?V4
   \   00004E   AF..         MOV     R7,?V5
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   A3           INC     DPTR
   \   000055   7402         MOV     A,#0x2
   \   000057   F0           MOVX    @DPTR,A
    496                  pMsg->sop = MT_UART_SOF;
    497                  pMsg->len = msg->DataLength + 6;
   \   000058   EE           MOV     A,R6
   \   000059   2402         ADD     A,#0x2
   \   00005B   F5..         MOV     ?V4,A
   \   00005D   E4           CLR     A
   \   00005E   3F           ADDC    A,R7
   \   00005F   F5..         MOV     ?V5,A
   \   000061   85..82       MOV     DPL,?V2
   \   000064   85..83       MOV     DPH,?V3
   \   000067   E0           MOVX    A,@DPTR
   \   000068   2406         ADD     A,#0x6
   \   00006A   85..82       MOV     DPL,?V4
   \   00006D   85..83       MOV     DPH,?V5
   \   000070   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000073   7418         MOV     A,#0x18
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   E4           CLR     A
   \   000078   12....       LCALL   ?Subroutine15 & 0xFFFF
    498                  pMsg->cmd = 0x0018;
    499                  pMsg->cmdEndPoint = 0xF1;
   \                     ??CrossCallReturnLabel_17:
   \   00007B   74F1         MOV     A,#-0xf
   \   00007D   12....       LCALL   ?Subroutine15 & 0xFFFF
    500                  pMsg->addr = addr;
   \                     ??CrossCallReturnLabel_18:
   \   000080   A3           INC     DPTR
   \   000081   E5..         MOV     A,?V6
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   E5..         MOV     A,?V7
   \   000087   F0           MOVX    @DPTR,A
    501                  pMsg->endPoint = endPoint;
   \   000088   85..82       MOV     DPL,?XSP + 0
   \   00008B   85..83       MOV     DPH,?XSP + 1
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   F0           MOVX    @DPTR,A
    502                  memcpy(pMsg->data, msg->Data, msg->DataLength);
   \   00009C                ; Setup parameters for call to function memcpy
   \   00009C   85..82       MOV     DPL,?V2
   \   00009F   85..83       MOV     DPH,?V3
   \   0000A2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000A5   85..82       MOV     DPL,?V0
   \   0000A8   85..83       MOV     DPH,?V1
   \   0000AB   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000AE   EE           MOV     A,R6
   \   0000AF   2409         ADD     A,#0x9
   \   0000B1   FA           MOV     R2,A
   \   0000B2   E4           CLR     A
   \   0000B3   3F           ADDC    A,R7
   \   0000B4   FB           MOV     R3,A
   \   0000B5   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   0000B8   7402         MOV     A,#0x2
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
    503                  pMsg->fsc = MT_UartCalcFCS(0, &pMsg->len, 1);
   \   0000BD                ; Setup parameters for call to function MT_UartCalcFCS
   \   0000BD   7C01         MOV     R4,#0x1
   \   0000BF   AA..         MOV     R2,?V4
   \   0000C1   AB..         MOV     R3,?V5
   \   0000C3   7900         MOV     R1,#0x0
   \   0000C5   12....       LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
   \   0000C8   E9           MOV     A,R1
   \   0000C9   F9           MOV     R1,A
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   F0           MOVX    @DPTR,A
    504                  pMsg->fsc = MT_UartCalcFCS(pMsg->fsc, pMsg->dataBody, pMsg->len);
   \   0000CF                ; Setup parameters for call to function MT_UartCalcFCS
   \   0000CF   85..82       MOV     DPL,?V4
   \   0000D2   85..83       MOV     DPH,?V5
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   FC           MOV     R4,A
   \   0000D7   EE           MOV     A,R6
   \   0000D8   2403         ADD     A,#0x3
   \   0000DA   FA           MOV     R2,A
   \   0000DB   E4           CLR     A
   \   0000DC   3F           ADDC    A,R7
   \   0000DD   FB           MOV     R3,A
   \   0000DE   12....       LCALL   `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
   \   0000E1   E9           MOV     A,R1
   \   0000E2   8E82         MOV     DPL,R6
   \   0000E4   8F83         MOV     DPH,R7
   \   0000E6   F0           MOVX    @DPTR,A
    505                  HalUARTWrite(HAL_UART_PORT_0, &pMsg->sop, sizeof(mtUserSerialMsg_t) - 2 + msg->DataLength);
   \   0000E7                ; Setup parameters for call to function HalUARTWrite
   \   0000E7   85..82       MOV     DPL,?V2
   \   0000EA   85..83       MOV     DPH,?V3
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   2408         ADD     A,#0x8
   \   0000F0   FC           MOV     R4,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   3400         ADDC    A,#0x0
   \   0000F5   FD           MOV     R5,A
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   A3           INC     DPTR
   \   0000FB   AA82         MOV     R2,DPL
   \   0000FD   AB83         MOV     R3,DPH
   \   0000FF   7900         MOV     R1,#0x0
   \   000101   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    506                  HalUARTWrite(HAL_UART_PORT_0, &pMsg->fsc, 1);
   \   000104                ; Setup parameters for call to function HalUARTWrite
   \   000104   7C01         MOV     R4,#0x1
   \   000106   7D00         MOV     R5,#0x0
   \   000108   EE           MOV     A,R6
   \   000109   FA           MOV     R2,A
   \   00010A   EF           MOV     A,R7
   \   00010B   FB           MOV     R3,A
   \   00010C   7900         MOV     R1,#0x0
   \   00010E   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    507                  osal_mem_free(pMsg);
   \   000111                ; Setup parameters for call to function osal_mem_free
   \   000111   EE           MOV     A,R6
   \   000112   FA           MOV     R2,A
   \   000113   EF           MOV     A,R7
   \   000114   FB           MOV     R3,A
   \   000115   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    508              }
    509          }
   \                     ??CoordinatorIncomingRoutine_0:
   \   000118   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for topoBuffer>`:
   \   000000   02           DB 2
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   0000         DW 0
   \   00000B   0000         DW 0
   \   00000D   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for commonClusterId>`:
   \   000000   0100         DW 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sapp_taskInitProcess::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sapp_taskInitProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??createEndPoint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    createEndPoint

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sapp_controlEpProcess::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sapp_controlEpProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sapp_functionEpProcess::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sapp_functionEpProcess

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??CreateUserTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CreateUserTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??DeleteUserTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DeleteUserTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ModifyRefreshCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ModifyRefreshCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??CoordinatorIncomingRoutine::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CoordinatorIncomingRoutine
    510          #endif
    511          #endif//SAPP_ZSTACK

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     21   CoordinatorIncomingRoutine
        0     17   -> HalUARTWrite
        0     17   -> MT_UartCalcFCS
        0     19   -> memcpy
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      1      9   CreateUserTimer
        0      9   -> osal_start_timerEx
      2      0   DeleteUserTimer
      3      0   ModifyRefreshCycle
      1     52   SendData
        0     33   -> AF_DataRequest
        0     24   -> HalLedBlink
      1     20   createEndPoint
        0     10   -> afRegister
      1     20   sapp_controlEpProcess
        0     17   -> HalLedBlink
        0     17   -> NLME_GetExtAddr
        0     19   -> SendData
        0     19   -> memcpy
        0     20   -> osal_memcpy
        0     17   -> osal_msg_deallocate
        0     17   -> osal_msg_receive
        0     17   -> osal_start_timerEx
        0     17   -> osal_stop_timerEx
      1     19   sapp_functionEpProcess
        0     17   -> HalLedBlink
        0     17   -> osal_msg_deallocate
        0     17   -> osal_msg_receive
        0     17   -> osal_start_timerEx
        0     17   -> osal_stop_timerEx
      1     10   sapp_taskInitProcess
        0     10   -> HalIOInit
        0     10   -> MT_UartRegisterTaskID
        0     10   -> createEndPoint
        0     10   -> osal_mem_alloc


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ?<Constant {3, 0, 0}>
       2  ?<Initializer for commonClusterId>
      14  ?<Initializer for topoBuffer>
       7  ??Subroutine30_0
       4  ??Subroutine31_0
       2  ??Subroutine32_0
       2  ??Subroutine33_0
       1  ??Subroutine34_0
       1  ??Subroutine35_0
       8  ??Subroutine36_0
       6  ??Subroutine37_0
       7  ??Subroutine38_0
       2  ??Subroutine39_0
       1  ??Subroutine40_0
       9  ??Subroutine41_0
       5  ?Subroutine0
      10  ?Subroutine1
      13  ?Subroutine10
      16  ?Subroutine11
       9  ?Subroutine12
       9  ?Subroutine13
       6  ?Subroutine14
       6  ?Subroutine15
      24  ?Subroutine16
      16  ?Subroutine17
      15  ?Subroutine18
       6  ?Subroutine19
       7  ?Subroutine2
      10  ?Subroutine20
       5  ?Subroutine21
      12  ?Subroutine22
      10  ?Subroutine23
      10  ?Subroutine24
      15  ?Subroutine25
       8  ?Subroutine26
       9  ?Subroutine27
      10  ?Subroutine28
      11  ?Subroutine29
       2  ?Subroutine3
      15  ?Subroutine4
      10  ?Subroutine5
      16  ?Subroutine6
       4  ?Subroutine7
      18  ?Subroutine8
      15  ?Subroutine9
     283  CoordinatorIncomingRoutine
       6  CoordinatorIncomingRoutine::?relay
      54  CreateUserTimer
       6  CreateUserTimer::?relay
      11  DeleteUserTimer
       6  DeleteUserTimer::?relay
      49  ModifyRefreshCycle
       6  ModifyRefreshCycle::?relay
     187  SendData
       6  SendData::?relay
       2  commonClusterId
      33  controlEndPointInfo
       1  controlTaskId
     189  createEndPoint
       6  createEndPoint::?relay
       1  curNwkState
       2  funcTableBuffer
       1  functionTaskId
       1  isUserTimerRunning
     827  sapp_controlEpProcess
       6  sapp_controlEpProcess::?relay
     604  sapp_functionEpProcess
       6  sapp_functionEpProcess::?relay
     262  sapp_taskInitProcess
       6  sapp_taskInitProcess::?relay
      14  topoBuffer
       1  transID

 
 2 838 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
    16 bytes in segment XDATA_I
    16 bytes in segment XDATA_ID
     3 bytes in segment XDATA_ROM_C
    40 bytes in segment XDATA_Z
 
    70 bytes of CODE     memory
     3 bytes of CONST    memory
 2 838 bytes of HUGECODE memory
    56 bytes of XDATA    memory

Errors: none
Warnings: none
